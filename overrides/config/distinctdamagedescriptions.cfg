# Configuration file

general {
    # Enable debug mode. Console will be filled with debug messages. The frequency/content of the messages may vary across versions. Only enable if troubleshooting or developing.
    B:"Debug Mode"=false

    # When enabled, DDD will attempt to fix errors that occur, if it can. Otherwise, it will throw an exception and crash. Only enable this if you know what you're doing!
    B:"Salvage Errors"=false

    ##########################################################################################################
    # core
    #--------------------------------------------------------------------------------------------------------#
    # Alter core behaviour about Distinct Damage Descriptions
    ##########################################################################################################

    core {
        # Enable Adaptive Weakness
        # Adaptive Weakness kicks in when a mob that is adaptive is hit by type(s) they are weak to.
        # Their adaptive amount is set to a percentage of the base amount, that percentage being equal to exp(avg), where: 
        #    exp being the exponential function
        #    avg is the average of all of the mobs weakness values that were hit (which is negative)
        # This triggers only when a mob's adaptability is triggered.
        B:"Enable Adaptive Weakness"=false

        # Enable the Distinct Disc to drop from Skeletons
        # The disc will drop if a Skeleton is killed by a non-player, non-skeleton, non-golem and non-tamable mob.
        B:"Enable Distinct Disc Drop"=true

        # If set to true, and Distinct Damage Description will try to generate appropriate config values for weapons, mobs, armor and projectiles on the fly during gameplay. This isn't super accurate and is rather primitive.
        B:"Generate Configs"=false

        # If set, DistinctDamageDescriptions will generate example JSON files on startup for custom damage types, creature types and filters.
        B:"Generate JSON"=true

        # If true, DDD will register potion effects that grant damage/resistance buffs/debuffs
        B:"Register Potion Effects"=false

        # If true, DDD will register and add potions that grant damage/resistance buffs/debuffs. Requires Register Potion Effects to be true.
        B:"Register Potions"=false

        # If registration messages from Distinct Damage Descriptions are clogging the log, you can disable them here.
        B:"Suppress Registration Info"=false

        # If warning messages from Distinct Damage Descriptions are clogging the log, you can disable them here. This may be indicative of a real issue though, so make sure there's no real issue first!
        B:"Suppress Warnings"=false

        # If true, DistinctDamageDescriptions will load custom creature types from JSON located in config/distinctdamagedescriptions/creatureTypes.
        # These JSON files can be used to apply potion/critical hit immunities to large swaths of mobs at once. Also usuable in CraftTweaker.
        B:"Use Creature Types From JSON"=false

        # If true, Distinct Damage Descriptions will load and enable custom damage types from JSON found in config/distinctdamagedescriptions/damageTypes
        B:"Use Custom Damage Types From JSON"=false

        # Should Distinct Damage Descriptions use its custom death messages for damage types?
        B:"Use Custom Death Messages"=false
    }

    ##########################################################################################################
    # damage
    #--------------------------------------------------------------------------------------------------------#
    # Alter the base damage of weapons and mobs
    ##########################################################################################################

    damage {
        # Change the default damage distributions items use when they aren't given one in the config.
        #     BLUDGEONING: Items will use a 100% bludgeoning damage distribution.
        #     PIERCING: Items will use a 100% piercing damage distribution.
        #     NORMAL: Items will use a 100% normal damage distribution. Normal damage is an internal type recognized by DDD.
        #     BYPASS: Items will use a 100% unknown damage distribution. Unknown damage is an internal type recognized by DDD.
        # Valid values:
        # BLUDGEONING
        # PIERCING
        # NORMAL
        # BYPASS
        S:"Default Item Damage Distribution"=BLUDGEONING

        # Change the default damage distributions mobs use when they aren't given one in the config.
        #     BLUDGEONING: Mobs will use a 100% bludgeoning damage distribution.
        #     PIERCING: Mobs will use a 100% piercing damage distribution.
        #     NORMAL: Mobs will use a 100% normal damage distribution. Normal damage is an internal type recognized by DDD.
        #     BYPASS: Mobs will use a 100% unknown damage distribution. Unknown damage is an internal type recognized by DDD.
        # Valid values:
        # BLUDGEONING
        # PIERCING
        # NORMAL
        # BYPASS
        S:"Default Mob Damage Distribution"=BLUDGEONING

        # Change the default damage distributions projectiles use when they aren't given one in the config.
        #     BLUDGEONING: Projectiles will use a 100% bludgeoning damage distribution.
        #     PIERCING: Projectiles will use a 100% piercing damage distribution.
        #     NORMAL: Projectiles will use a 100% normal damage distribution. Normal damage is an internal type recognized by DDD.
        #     BYPASS: Projectiles will use a 100% unknown damage distribution. Unknown damage is an internal type recognized by DDD.
        # Valid values:
        # BLUDGEONING
        # PIERCING
        # NORMAL
        # BYPASS
        S:"Default Projectile Damage Distribution"=PIERCING

        # Modify the base damage type distribution of mobs.
        # Each entry is of the form id;[(t,a)] where:
        #    id is the namespaced id of the mob (e.g. minecraft:zombie)
        #    [(t,a)] is a list of tuples (t,a), separated by commas, that lists the percent of each damage type a mob does.
        #       t is the type of damage. Requires the 'ddd_' prefix. Can use s, p, b, instead for slashing, piercing or bludegeoning
        #       a is the percent of this damage this mob does. if a = 0, it is ignored.
        #       If custom damage is disabled, any custom damage here will be distributed amongst all non-zero damages (Or just bludgeoning if none are non zero)
        #    All percents MUST add to 1
        # Mobs that aren't listed here will use the default mob damage distribution.
        # Malformed entries in this list will be ignored.
        S:"Mob Base Damage" <
            minecraft:cave_spider;[(p, 0.75), (ddd_poison, 0.25)]
            minecraft:magma_cube;[(b, 0.8), (ddd_fire, 0.2)]
            minecraft:ocelot;[(p, 0.3), (s, 0.7)]
            minecraft:polar_bear;[(s, 0.25), (b, 0.75)]
            minecraft:slime;[(b, 0.4), (ddd_acid, 0.6)]
            minecraft:spider;[(p, 1)]
            minecraft:wolf;[(p, 1)]
            minecraft:zombie;[(b, 0.75), (ddd_necrotic, 0.25)]
            minecraft:zombie_villager;[(b, 0.75), (ddd_necrotic, 0.25)]
            minecraft:zombie_pigman;[(b, 0.75), (ddd_necrotic, 0.25)]
            minecraft:wither;[(b, 0.1), (ddd_necrotic, 0.9)]
            minecraft:blaze;[(b, 0.25), (ddd_fire, 0.75)]
            minecraft:vex;[(ddd_psychic, 1)]
            minecraft:silverfish;[(p, 1)]
            minecraft:endermite;[(p, 1)]
            minecraft:shulker_bullet;[(ddd_psychic, 1)]
            tconstruct:blueslime;[(b, 0.4), (ddd_acid, 0.6)]
            thermalfoundation:blizz;[(b, 0.5), (ddd_cold, 0.5)]
            thermalfoundation:blizz_bolt;[(ddd_cold, 1)]
            thermalfoundation:basalz;[(b, 0.5), (ddd_force, 0.5)]
            thermalfoundation:basalz_bolt;[(b, 1)]
            thermalfoundation:blitz;[(b, 0.5), (ddd_thunder, 0.5)]
            thermalfoundation:blitz_bolt;[(ddd_thunder, 1)]
            lycanitesmobs:wendigo;[(b, 1)]
            lycanitesmobs:amalgalich;[(ddd_force, 0.5), (ddd_necrotic, 0.5)]
            lycanitesmobs:geist;[(b, 0.4), (ddd_necrotic, 0.6)]
            lycanitesmobs:necrovore;[(p, 0.7), (ddd_necrotic, 0.3)]
            lycanitesmobs:ghoul;[(b, 0.6), (ddd_necrotic, 0.4)]
            lycanitesmobs:cryptkeeper;[(b, 0.5), (ddd_necrotic, 0.5)]
            lycanitesmobs:reaper;[(b, 1)]
            lycanitesmobs:gnekk;[(s, 0.3), (p, 0.2), (ddd_poison, 0.5)]
            lycanitesmobs:pixen;[(b, 1)]
            lycanitesmobs:clink;[(b, 1)]
            lycanitesmobs:arix;[(b, 1)]
            lycanitesmobs:afrit;[(b, 1)]
            lycanitesmobs:jabberwock;[(s, 0.8), (p, 0.2)]
            lycanitesmobs:arisaur;[(b, 1)]
            lycanitesmobs:wraamon;[(p, 0.5), (ddd_force, 0.4), (ddd_psychic, 0.1)]
            lycanitesmobs:manticore;[(p, 0.9), (ddd_poison, 0.1)]
            lycanitesmobs:barghest;[(p, 1.0)]
            lycanitesmobs:conba;[(b, 1)]
            lycanitesmobs:warg;[(p, 1.0)]
            lycanitesmobs:kobold;[(s, 0.2), (p, 0.8)]
            lycanitesmobs:makaalpha;[(b, 1)]
            lycanitesmobs:maka;[(b, 1)]
            lycanitesmobs:feradon;[(s, 0.5), (p, 0.5)]
            lycanitesmobs:salamander;[(p, 0.4), (ddd_fire, 0.6)]
            lycanitesmobs:chupacabra;[(s, 0.4), (p, 0.4), (b, 0.2)]
            lycanitesmobs:geken;[(s, 0.3), (p, 0.3), (ddd_poison, 0.4)]
            lycanitesmobs:maug;[(s, 0.5), (b, 0.5)]
            lycanitesmobs:aspid;[(b, 1)]
            lycanitesmobs:dawon;[(s, 0.6), (p, 0.4)]
            lycanitesmobs:khalk;[(p, 0.2), (b, 0.8)]
            lycanitesmobs:quillbeast;[(b, 1)]
            lycanitesmobs:bobeko;[(b, 1)]
            lycanitesmobs:yeti;[(b, 1)]
            lycanitesmobs:yale;[(b, 1)]
            lycanitesmobs:epion;[(b, 1)]
            lycanitesmobs:balayang;[(p, 1)]
            lycanitesmobs:uvaraptor;[(p, 1.0)]
            lycanitesmobs:roc;[(p, 1.0)]
            lycanitesmobs:raiko;[(p, 1.0)]
            lycanitesmobs:ventoraptor;[(s, 0.25), (p, 0.75)]
            lycanitesmobs:lobber;[(b, 0.5), (ddd_fire, 0.5)]
            lycanitesmobs:wildkin;[(s, 0.5), (b, 0.5)]
            lycanitesmobs:troll;[(b, 1.0)]
            lycanitesmobs:ettin;[(b, 1.0)]
            lycanitesmobs:lacedon;[(b, 1.0)]
            lycanitesmobs:roa;[(p, 1.0)]
            lycanitesmobs:silex;[(b, 1)]
            lycanitesmobs:abtu;[(p, 1.0)]
            lycanitesmobs:strider;[(p, 1.0)]
            lycanitesmobs:skylus;[(p, 1.0)]
            lycanitesmobs:thresher;[(p, 0.5), (b, 0.5)]
            lycanitesmobs:aglebemu;[(b, 0.2), (ddd_poison, 0.8)]
            lycanitesmobs:cephignis;[(b, 1)]
            lycanitesmobs:abaia;[(ddd_lightning, 1.0)]
            lycanitesmobs:ika;[(b, 1)]
            lycanitesmobs:dweller;[(s, 0.5), (ddd_poison, 0.5)]
            lycanitesmobs:ioray;[(b, 1)]
            lycanitesmobs:quetzodracl;[(s, 0.5), (p, 0.5)]
            lycanitesmobs:cockatrice;[(s, 0.5), (p, 0.5)]
            lycanitesmobs:morock;[(p, 1.0)]
            lycanitesmobs:ignibus;[(b, 1)]
            lycanitesmobs:zoataur;[(b, 1.0)]
            lycanitesmobs:remobra;[(p, 0.4), (ddd_poison, 0.6)]
            lycanitesmobs:spriggan;[(b, 1)]
            lycanitesmobs:tremor;[(b, 0.5), (ddd_thunder, 0.5)]
            lycanitesmobs:vapula;[(b, 1.0)]
            lycanitesmobs:geonach;[(p, 0.5), (b, 0.5)]
            lycanitesmobs:cinder;[(b, 1)]
            lycanitesmobs:reiver;[(b, 1)]
            lycanitesmobs:jengu;[(b, 1)]
            lycanitesmobs:spectre;[(ddd_force, 1.0)]
            lycanitesmobs:banshee;[(ddd_psychic, 1.0)]
            lycanitesmobs:grue;[(s, 0.5), (ddd_necrotic, 0.25), (ddd_psychic, 0.25)]
            lycanitesmobs:aegis;[(s, 0.5), (ddd_force, 0.5)]
            lycanitesmobs:zephyr;[(ddd_lightning, 1.0)]
            lycanitesmobs:djinn;[(b, 1)]
            lycanitesmobs:eechetik;[(ddd_poison, 1.0)]
            lycanitesmobs:wraith;[(ddd_necrotic, 1.0)]
            lycanitesmobs:sylph;[(b, 1)]
            lycanitesmobs:volcan;[(ddd_fire, 1.0)]
            lycanitesmobs:wisp;[(b, 1)]
            lycanitesmobs:argus;[(b, 1)]
            lycanitesmobs:nymph;[(b, 1)]
            lycanitesmobs:xaphan;[(b, 1)]
            lycanitesmobs:herma;[(p, 1.0)]
            lycanitesmobs:sutiramu;[(p, 0.6), (ddd_poison, 0.4)]
            lycanitesmobs:vespidqueen;[(p, 0.5), (ddd_poison, 0.5)]
            lycanitesmobs:vespid;[(p, 0.5), (ddd_poison, 0.5)]
            lycanitesmobs:joustalpha;[(p, 1.0)]
            lycanitesmobs:joust;[(p, 1.0)]
            lycanitesmobs:tarantula;[(p, 0.5), (ddd_poison, 0.5)]
            lycanitesmobs:calpod;[(p, 1.0)]
            lycanitesmobs:erepede;[(b, 1)]
            lycanitesmobs:concapedesegment;[(p, 1.0)]
            lycanitesmobs:concapede;[(p, 1.0)]
            lycanitesmobs:frostweaver;[(p, 0.5), (ddd_cold, 0.5)]
            lycanitesmobs:eyewig;[(p, 0.5), (ddd_acid, 0.25), (ddd_poison, 0.25)]
            lycanitesmobs:gorgomite;[(p, 1.0)]
            lycanitesmobs:darkling;[(p, 0.5), (ddd_necrotic, 0.5)]
            lycanitesmobs:lurker;[(p, 0.5), (ddd_poison, 0.5)]
            lycanitesmobs:triffid;[(s, 0.25), (p, 0.25), (ddd_poison, 0.5)]
            lycanitesmobs:treant;[(b, 1.0)]
            lycanitesmobs:ent;[(b, 0.5), (ddd_necrotic, 0.5)]
            lycanitesmobs:tpumpkyn;[(b, 1)]
            lycanitesmobs:shambler;[(s, 0.5), (ddd_poison, 0.5)]
            lycanitesmobs:beholder;[(b, 1)]
            lycanitesmobs:grell;[(b, 1)]
            lycanitesmobs:grigori;[(p, 0.5), (ddd_necrotic, 0.5)]
            lycanitesmobs:vorach;[(p, 1)]
            lycanitesmobs:trite;[(p, 0.5), (ddd_necrotic, 0.5)]
            lycanitesmobs:shade;[(s, 0.8), (ddd_psychic, 0.2)]
            lycanitesmobs:asmodeus;[(b, 1)]
            lycanitesmobs:astaroth;[(b, 1)]
            lycanitesmobs:krake;[(s, 0.25), (p, 0.25), (ddd_thunder, 0.5)]
            lycanitesmobs:crusk;[(p, 1.0)]
            lycanitesmobs:serpix;[(p, 0.8), (ddd_cold, 0.2)]
            lycanitesmobs:gorger;[(p, 0.8), (ddd_fire, 0.2)]
            lycanitesmobs:behemoth;[(b, 1)]
            lycanitesmobs:belph;[(b, 1)]
            lycanitesmobs:pinky;[(s, 0.5), (p, 0.5)]
            lycanitesmobs:archvile;[(b, 1)]
            lycanitesmobs:cacodemon;[(b, 1)]
            lycanitesmobs:rahovart;[(ddd_fire, 0.5), (ddd_necrotic, 0.5)]
         >

        # Modify the damage type of projectiles
        # Each entry is of the form id;[(t,a)];items where:
        #    id is the namespaced id of the projectile ENTITY (e.g. minecraft:arrow)
        #    [(t,a)] is a list of tuples (t,a), separated by commas, that lists the percent of each damage type a projectile does.
        #       t is the type of damage. Requires the 'ddd_' prefix. can use s, p, b, instead for slashing, piercing or bludegeoning
        #       a is the percent of this damage this mob does. if a = 0, it is ignored.
        #       If custom damage is disabled, any custom damage here will be distributed amongst all non-zero damages (Or just bludgeoning if none are non zero)
        #    All percents MUST add to 1
        #    items are the item ids associated with this projectile, separated by a comma (For example, arrow entities are associated with the item ids minecraft:arrow and minecraft:tipped_arrow). This is used for tooltips.
        #       If the projectile has no item form, omit this part, including the semicolon.
        # Projectiles that aren't listed here will use the default projectile damage distribution, no matter the projectile.
        # Malformed entries in this list will be ignored.
        S:"Projectile Damage Type" <
            minecraft:arrow;[(p, 1)];minecraft:arrow,minecraft:tipped_arrow
            minecraft:spectral_arrow;[(p, 1)];minecraft:spectral_arrow
            minecraft:llama_spit;[(b, 1)]
            lycanitesmobs:whirlwind;[(ddd_cold, 0.3), (ddd_thunder, 0.7)];lycanitesmobs:whirlwindcharge
            lycanitesmobs:magma;[(ddd_fire, 0.6), (b, 0.4)];lycanitesmobs:magmacharge,lycanitesmobs:magmascepter
            lycanitesmobs:frostbolt;[(ddd_cold, 1)];lycanitesmobs:frostboltcharge,lycanitesmobs:frostboltscepter
            lycanitesmobs:spectralbolt;[(ddd_psychic, 0.5), (ddd_force, 0.5)];lycanitesmobs:spectralboltcharge,lycanitesmobs:spectralboltscepter
            lycanitesmobs:venomshot;[(ddd_poison, 1)];lycanitesmobs:venomshotcharge
            lycanitesmobs:boulderblast;[(b, 1)];lycanitesmobs:boulderblastcharge,lycanitesmobs:boulderblastscepter
            lycanitesmobs:icefireball;[(ddd_cold, 1)];lycanitesmobs:icefireballcharge,lycanitesmobs:icefirescepter
            lycanitesmobs:hellfireball;[(ddd_fire, 0.5), (ddd_necrotic, 0.5)];lycanitesmobs:hellfireballcharge,lycanitesmobs:hellfirescepter
            lycanitesmobs:quill;[(p, 1)];lycanitesmobs:quillcharge,lycanitesmobs:quillscepter
            lycanitesmobs:scorchfireball;[(ddd_fire, 0.5), (ddd_acid, 0.5)];lycanitesmobs:scorchfireballcharge,lycanitesmobs:scorchfirescepter
            lycanitesmobs:throwingscythe;[(p, 1)];lycanitesmobs:throwingscythecharge
            lycanitesmobs:acidsplash;[(ddd_acid, 1)];lycanitesmobs:acidsplashcharge
            lycanitesmobs:lobdarklings;[(b, 1)];lycanitesmobs:lobdarklingscharge
            lycanitesmobs:faebolt;[(ddd_necrotic, 0.5), (ddd_radiant, 0.5)];lycanitesmobs:faeboltcharge
            lycanitesmobs:ember;[(ddd_fire, 1)];lycanitesmobs:embercharge
            lycanitesmobs:poop;[(b, 0.3), (ddd_poison, 0.7)];lycanitesmobs:poopcharge,lycanitesmobs:poopscepter
            lycanitesmobs:lifedrain;[(ddd_necrotic, 1)];lycanitesmobs:lifedraincharge,lycanitesmobs:lifedrainscepter
            lycanitesmobs:aquapulse;[(b, 1)];lycanitesmobs:aquapulsecharge,lycanitesmobs:aquapulsescepter
            lycanitesmobs:arcanelaserstorm;[(b, 0.25), (ddd_lightning, 0.25), (ddd_thunder, 0.25), (ddd_force, 0.25)];lycanitesmobs:arcanelaserstormcharge,lycanitesmobs:arcanelaserstormscepter
            lycanitesmobs:aetherwave;[(ddd_radiant, 1)];lycanitesmobs:aetherwavecharge
            lycanitesmobs:lightball;[(ddd_radiant, 1)];lycanitesmobs:lightballcharge
            lycanitesmobs:mudshot;[(b, 1)];lycanitesmobs:mudshotcharge,lycanitesmobs:mudshotscepter
            lycanitesmobs:crystalshard;[(p, 0.8), (b, 0.2)];lycanitesmobs:crystalshardcharge
            lycanitesmobs:tundra;[(ddd_cold, 0.5), (b, 0.5)];lycanitesmobs:tundracharge,lycanitesmobs:tundrascepter
            lycanitesmobs:tricksterflare;[(ddd_force, 1)];lycanitesmobs:tricksterflarecharge
            lycanitesmobs:demonicblast;[(ddd_lightning, 0.8), (ddd_necrotic, 0.2)];lycanitesmobs:demonicblastcharge,lycanitesmobs:demoniclightningscepter
            lycanitesmobs:bloodleech;[(ddd_necrotic, 1)];lycanitesmobs:bloodleechcharge,lycanitesmobs:bloodleechscepter
            lycanitesmobs:frostweb;[(ddd_cold, 1)];lycanitesmobs:frostwebcharge,lycanitesmobs:frostwebscepter
            lycanitesmobs:chaosorb;[(ddd_force, 1)];lycanitesmobs:chaosorbcharge
            lycanitesmobs:poisonray;[(ddd_poison, 0.5), (ddd_necrotic, 0.5)];lycanitesmobs:poisonraycharge,lycanitesmobs:poisonrayscepter
            lycanitesmobs:blizzard;[(ddd_cold, 1)];lycanitesmobs:blizzardcharge,lycanitesmobs:blizzardscepter
            lycanitesmobs:doomfireball;[(ddd_fire, 0.5), (ddd_force, 0.5)];lycanitesmobs:doomfireballcharge,lycanitesmobs:doomfirescepter
            lycanitesmobs:waterjet;[(b, 0.5), (ddd_acid, 0.5)];lycanitesmobs:waterjetcharge,lycanitesmobs:waterjetscepter
            lycanitesmobs:devilstar;[(ddd_necrotic, 0.5), (ddd_force, 0.5)];lycanitesmobs:devilstarcharge
            lycanitesmobs:acidglob;[(ddd_acid, 0.5), (b, 0.5)];lycanitesmobs:acidglobcharge
            lycanitesmobs:primeember;[(ddd_fire, 1)];lycanitesmobs:primeembercharge
            lycanitesmobs:smitefireball;[(ddd_radiant, 0.8), (ddd_fire, 0.2)];lycanitesmobs:smitefireballcharge
            spartanweaponry:arrow_wood;[(p,1)];spartanweaponry:arrow_wood,spartanweaponry:arrow_wood_tipped
            spartanweaponry:arrow_iron;[(p,1)];spartanweaponry:arrow_iron,spartanweaponry:arrow_iron_tipped
            spartanweaponry:arrow_diamond;[(p,1)];spartanweaponry:arrow_diamond,spartanweaponry:arrow_diamond_tipped
            spartanweaponry:bolt;[(p,1)];spartanweaponry:bolt,spartanweaponry:bolt_tipped,spartanweaponry:bolt_spectral
            spartanweaponry:arrow_explosive;[(b,1)];spartanweaponry:arrow_explosive
            ebwizardry:conjured_arrow;[(p, 0.5), (ddd_force, 0.5)];ebwizardry:spectral_bow
         >

        # Modify the base damage type distribution of weapons/items.
        # Each entry is of the form id;[(t,a)] where:
        #    id is the namespaced id of the item (e.g. minecraft:diamond_sword)
        #    [(t,a)] is a list of tuples (t,a), separated by commas, that lists the percent of each damage type an item does.
        #       t is the type of damage. Requires the 'ddd_' prefix. Can use s, p, b, instead for slashing, piercing or bludegeoning
        #       a is the percent of this damage this mob does. if a = 0, it is ignored.
        #       If custom damage is disabled, any custom damage here will be distributed amongst all non-zero damages (Or just bludgeoning if none are non zero)
        #    All percents MUST add to 1
        # Items that aren't listed here will use the default item damage distribution, no matter the item.
        # Malformed entries in this list will be ignored.
        S:"Weapon Base Damage" <
            minecraft:blaze_rod;[(ddd_fire, 1)]
            minecraft:nether_star;[(ddd_necrotic, 0.5), (ddd_force, 0.5)]
            minecraft:torch;[(ddd_fire, 1)]
            minecraft:redstone_torch;[(b, 0.9), (ddd_lightning, 0.1)]
            minecraft:arrow;[(p, 1)]
            minecraft:tipped_arrow;[(p, 1)]
            minecraft:spectral_arrow;[(p, 1)]
            minecraft:wooden_sword;[(s, 0.5), (b, 0.5)]
            minecraft:wooden_axe;[(s, 0.3), (b, 0.7)]
            minecraft:wooden_pickaxe;[(p, 0.5), (b, 0.5)]
            minecraft:wooden_shovel;[(b, 1)]
            minecraft:wooden_hoe;[(p, 0.5), (b, 0.5)]
            minecraft:stone_sword;[(b, 1)]
            minecraft:stone_axe;[(b, 1)]
            minecraft:stone_pickaxe;[(p, 0.2), (b, 0.8)]
            minecraft:stone_shovel;[(b, 1)]
            minecraft:stone_hoe;[(p, 0.2), (b, 0.8)]
            minecraft:iron_sword;[(s, 0.8), (p, 0.2)]
            minecraft:iron_axe;[(s, 0.6), (b, 0.4)]
            minecraft:iron_pickaxe;[(p, 0.9), (b, 0.1)]
            minecraft:iron_shovel;[(p, 0.1), (b, 0.9)]
            minecraft:iron_hoe;[(p, 1)]
            minecraft:golden_sword;[(s, 1)]
            minecraft:golden_axe;[(s, 1)]
            minecraft:golden_pickaxe;[(p, 1)]
            minecraft:golden_shovel;[(b, 1)]
            minecraft:golden_hoe;[(p, 1)]
            minecraft:diamond_sword;[(s, 1)]
            minecraft:diamond_axe;[(s, 0.8), (b, 0.2)]
            minecraft:diamond_pickaxe;[(p, 1)]
            minecraft:diamond_shovel;[(b, 1)]
            minecraft:diamond_hoe;[(p, 1)]
            tconstruct:stone_torch;[(ddd_fire, 1)]
            tconstruct:slimesling;[(b, 0.9), (ddd_acid, 0.1)]
            tconstruct:pickaxe;[(p, 1)]
            tconstruct:shovel;[(b, 1)]
            tconstruct:hatchet;[(s, 0.3), (b, 0.7)]
            tconstruct:mattock;[(s, 0.45), (b, 0.45), (p, 0.1)]
            tconstruct:kama;[(p, 0.8), (s, 0.2)]
            tconstruct:hammer;[(b, 1)]
            tconstruct:excavator;[(b, 1)]
            tconstruct:lumberaxe;[(s, 0.5), (b, 0.5)]
            tconstruct:scythe;[(s, 0.8), (p, 0.2)]
            tconstruct:broadsword;[(s, 1)]
            tconstruct:longsword;[(s, 1)]
            tconstruct:rapier;[(p, 1)]
            tconstruct:frypan;[(b, 1)]
            tconstruct:battlesign;[(b, 1)]
            tconstruct:cleaver;[(s, 0.9), (b, 0.1)]
            tconstruct:shortbow;[(b, 1)]
            tconstruct:longbow;[(b, 1)]
            tconstruct:crossbow;[(b, 1)]
            tconstruct:arrow;[(p, 1)]
            tconstruct:bolt;[(p, 1)]
            tconstruct:shuriken;[(s, 1)]
            lycanitesmobs:grueclaw;[(s, 0.5), (ddd_necrotic, 0.25), (ddd_psychic, 0.25)]
            lycanitesmobs:geonachspear;[(p, 1)]
            lycanitesmobs:remobrawing;[(s, 0.5), (ddd_poison, 0.5)]
            lycanitesmobs:zephyrblade;[(s, 0.2), (ddd_lightning, 0.8)]
            lycanitesmobs:raidrablade;[(s, 0.2), (ddd_lightning, 0.8)]
            lycanitesmobs:clinkscythe;[(s, 0.7), (p, 0.3)]
            lycanitesmobs:geonachfist;[(b, 1)]
            lycanitesmobs:cinderblade;[(ddd_fire, 1)]
            lycanitesmobs:vapulacrystal;[(p, 0.8), (b, 0.2)]
            lycanitesmobs:reiverhorns;[(p, 0.2), (ddd_cold, 0.8)]
            lycanitesmobs:woodenpaxel;[(s, 0.5), (b, 0.5)]
            lycanitesmobs:ironpaxel;[(s, 0.8), (p, 0.2)]
            lycanitesmobs:sprigganheart;[(b, 1)]
            lycanitesmobs:gammasphere;[(ddd_radiant, 1)]
            ebwizardry:spectral_sword;[(s, 0.5), (ddd_force, 0.5)]
            ebwizardry:spectral_pickaxe;[(p, 0.5), (ddd_force, 0.5)]
            ebwizardry:flaming_axe;[(s, 0.5), (ddd_fire, 0.5)]
            ebwizardry:frost_axe;[(s, 0.5), (ddd_cold, 0.5)]
         >

        ##########################################################################################################
        # extra damage classification
        #--------------------------------------------------------------------------------------------------------#
        # Enable/disable damage distributions for certain vanilla damage sources.
        ##########################################################################################################

        "extra damage classification" {
            # Enable/disable the anvil damage distribution. Anvils inflict bludgeoning damage with this enabled, however this damage can only be reduced by helmets, and is capped at a 25% damage reduction. If disabled, vanilla handles it normally.
            B:"Anvil Distribution"=true

            # Enable/disable the cactus damage distribution. Cacti inflict piercing damage with this enabled. If disabled, vanilla handles it normally.
            B:"Cactus Distribution"=true

            # Enable/disable daylight burning distribution. Undead burning in the day while exposed to the sky will receive radiant damage when enabled. Only those undead specified in Daylight Burning Entities will be susceptible.
            B:"Daylight Burning Distribution"=true

            # Entities listed here will be susceptible to the Daylight Burning Distribution. Entities not listed won't take radiant damage, even if undead. Ideally, only put undead entities that actually burn in daylight here.
            S:"Daylight Burning Entities" <
                minecraft:zombie
                minecraft:zombie_villager
                minecraft:zombie_horse
                minecraft:skeleton
                minecraft:skeleton_horse
                minecraft:stray
                lycanitesmobs:ghoul
                lycanitesmobs:geist
                lycanitesmobs:necrovore
             >

            # Enable/disable Ender Pearl distribution, overriding the fall damage distribution for ender pearls specifically. Teleporting with Ender Pearls inflict force damage when enabled. Otherwise, it uses the same rules as falling.
            B:"Ender Pearl Damage"=true

            # Enable/disable evoker fangs distribution. Evoker fanges will inflict force damage when enabled.
            B:"Evoker Fangs Distribution"=true

            # The damage distribution to use for explosion damage; a list of comma separated tuples [(t, a)] with the same rules as mob or weapon damage
            S:"Explosion DamageDistribution"=[(b, 1)]

            # Enable/disable the explosion damage distribution. This applies to player made explosions (TNT, etc.), non-player made explosions (Creepers, etc.) and Firework Rockets (while using Elytra), at least in vanilla. Explosions inflict bludgeoning damage if enabled. If disabled, vanilla handles it normally.
            B:"Explosion Distribution"=true

            # Enable/disable the falling block damage distribution. Falling Blocks inflict bludgeoning damage with this enabled, however this damage can only be reduced by helmets. Vanilla's falling blocks inflict no damage without other mods or unless they are summoned with altered NBT data. If disabled, vanilla handles it normally.
            B:"Falling Block Distribution"=true

            # Enable/disable the fall damage distribution. This applies to any fall damage (falling, ender pearls). Falling inflicts bludgeoning damage with this enabled. If disabled, vanilla handles it normally.
            B:"Falling Distribution"=true

            # Enable/disable the fire damage distribution. All fire sources (fire, lava, magma etc.) will count as fire damage when enabled.
            B:"Fire Distribution"=true

            # Enable/disable the fly-into-wall damage distribution. This occurs when a player flys into a wall with Elytra. Flying into a wall inflicts bludgeoning damage with this enabled. If disabled, vanilla handles it normally.
            B:"Fly Into Wall Distribution"=true

            # Enable/disable guardian beam distribution. Guardian beams (not the spikes) will inflict force damage when enabled.
            B:"Guardian Beam Distribution"=true

            # Enable/disable guardian thorn distribution. Guardian's thorn attack will inflict piercing damage when enabled.
            B:"Guardian Thorns Damage"=true

            # Enable/disable the lightning damage distribution. Lightning bolts will inflict lightning damage with this enabled.
            B:"Lightning Distribution"=true

            # Enable/disable parrot cookie distribution. Parrots take poison damage when fed cookies.
            B:"Parrot Poison Damage"=true

            # Enable/diable poison effect distribution. Suffering from the Poison effect will inflict poison damage when enabled. It still can't be blocked by armor, but it can be blocked by resistances
            B:"Poison Effect Distribution"=true

            # Enable/disable potion damage distribution. Thrown potions of healing will inflict radiant damage against undead, and thrown potions of harming will inflict necrotic damage against non undead when enabled. It still can't be blocked by armor, but it can be blocked by resistances. Also applies to Area of Effect clouds
            B:"Potion Distribution"=true

            # Enable/disable suffocation distribution. Suffocating inflicts force damage when enabled.
            B:"Suffocation Damage"=true

            # Enable/disable thorns distribution. The Thorns enchantment will inflict force damage when enabled.
            B:"Thorns Distribution"=true

            # Enable/disable the wither damage distribution. Withering will inflict necrotic damage with this enabled. It still can't be blocked by armor, but it can be blocked by resistances
            B:"Wither Distribution"=true
        }

    }

    ##########################################################################################################
    # resistance
    #--------------------------------------------------------------------------------------------------------#
    # Alter the base resistances of armor, shields and mobs
    ##########################################################################################################

    resistance {
        # Define the rule DDD will use when calculating how armor effectiveness translates to actual armor values.
        #     ADD: For all armor values that are applicable, DDD will add them together. This typically means that damage that gets split into multiple types will be resisted more easily as the effectiveness of armor will be added together.
        #     MAX: DDD will take the maximum armor values that are applicable. So DDD will never give a higher armor value than the highest armor effectiveness rating that is applicable.
        #     AVG: DDD will average together all applicable armor values.
        # Valid values:
        # ADD
        # MAX
        # AVG
        S:"Armor Calculation Rule"=ADD

        # Define the rule DDD will use when parsing the armorResist config.
        #     LITERAL: DDD will parse the config exactly as it is written. Only the types written in an item's armor distribution will be used.
        #     IMPLIED: DDD will add in armor effectiveness for types not mentioned in an armor distribution. For example, an armor distribution of [(s, 0.8), (p, 0.5)] will have all the other registered DDD types added to its distribution. The effectiveness these types get is defined by impliedArmorEffectivess.
        # Valid values:
        # LITERAL
        # IMPLIED
        S:"Armor Parsing Rule"=LITERAL

        # Modify the base resistance effectiveness of armor
        # Each entry is of the form id;[(t,a)] where:
        #    id is the namespaced id of the item (e.g. minecraft:diamond_chestplate)
        #    [(t,a)] is a list of comma separated tuples of damage types this armor resists (if enabled).
        #       t is the damage type this armor resists. Requires the 'ddd_' prefix.
        #       a is the armor's effectiveness against that damage type.
        # Armors that aren't listed here will use the default armor distribution option.
        # Resistances effectiveness determines how armor points are distributed. That is, an value of 0.5 means that armor only uses 50% of its usual armor points when defending against that type
        # Malformed entries in this list will be ignored.
        S:"Armor Resistance" <
            minecraft:leather_helmet;[(s, 0.45), (p, 0.15), (b, 1.0)]
            minecraft:leather_chestplate;[(s, 0.45), (p, 0.15), (b, 1.0)]
            minecraft:leather_leggings;[(s, 0.45), (p, 0.15), (b, 1.0)]
            minecraft:leather_boots;[(s, 0.45), (p, 0.15), (b, 1.0)]
            minecraft:chainmail_helmet;[(s, 0.75), (b, 1)]
            minecraft:chainmail_chestplate;[(s, 0.75), (b, 1)]
            minecraft:chainmail_leggings;[(s, 0.75), (b, 1)]
            minecraft:chainmail_boots;[(s, 0.75), (b, 1)]
            minecraft:iron_helmet;[(s, 1.0), (p, 0.7), (b, 0.3)]
            minecraft:iron_chestplate;[(s, 1.0), (p, 0.7), (b, 0.3)]
            minecraft:iron_leggings;[(s, 1.0), (p, 0.7), (b, 0.3)]
            minecraft:iron_boots;[(s, 1.0), (p, 0.7), (b, 0.3)]
            minecraft:golden_helmet;[(s, 1.0), (p, 0.6), (b, 0.25)]
            minecraft:golden_chestplate;[(s, 1.0), (p, 0.6), (b, 0.25)]
            minecraft:golden_leggings;[(s, 1.0), (p, 0.6), (b, 0.25)]
            minecraft:golden_boots;[(s, 1.0), (p, 0.6), (b, 0.25)]
            minecraft:diamond_helmet;[(s, 0.15), (p, 1.0), (b, 0.7)]
            minecraft:diamond_chestplate;[(s, 0.15), (p, 1.0), (b, 0.7)]
            minecraft:diamond_leggings;[(s, 0.15), (p, 1.0), (b, 0.7)]
            minecraft:diamond_boots;[(s, 0.15), (p, 1.0), (b, 0.7)]
            ebwizardry:spectral_helmet;[(s, 1), (p, 1), (b, 1), (ddd_force, 1)]
            ebwizardry:spectral_chestplate;[(s, 1), (p, 1), (b, 1), (ddd_force, 1)]
            ebwizardry:spectral_leggings;[(s, 1), (p, 1), (b, 1), (ddd_force, 1)]
            ebwizardry:spectral_boots;[(s, 1), (p, 1), (b, 1), (ddd_force, 1)]
         >

        # Change the default behaviour of armor pieces with no distribution defined in the Armor Resistance config. Note that setting this to anything but NO_EFFECTIVENESS will make undefined armor pieces very strong, as their armor values will basically be multiplied by the number of types being inflicted (that they are effective against)
        #     NO_EFFECTIVENESS: Armor not defined will have no effectiveness. DDD calculated damage will effectively go right through the armor.
        #     ALL_EFFECTIVENESS: Armor not defined will have 100% effectiveness against all types. This sort of reverts the armor to "vanilla" behaviour, though again, the strength of the armor will be multiplied by the amount of damage types inflicted.
        #     EFFECTIVE_TO_REGULAR_TYPES: Armor not defined will have 100% effectiveness to all regular types. Regular types are types that DDD doesn't treat differently (only two "non-regular" types exist, and they are built-in.)
        #     ALLOW_BYPASS_DAMAGE_TYPE: Armor not defined will have 100% effectiveness to almost all types, except for one internal built-in type; the unknown type. This unknown type will bypass the armor entirely.
        # Valid values:
        # NO_EFFECTIVENESS
        # ALL_EFFECTIVENESS
        # EFFECTIVE_TO_REGULAR_TYPES
        # ALLOW_BYPASS_DAMAGE_TYPE
        S:"Default Armor Distribution"=NO_EFFECTIVENESS

        # Change the default behaviour of shields with no distribution defined in the Shield Effectiveness config.
        #     NO_EFFECTIVENESS: Shields not defined will have no effectiveness, i.e. they will block no damage at all.
        #     ALL_EFFECTIVENESS: Shields not defined will have 100% effectiveness to all types. This sort of reverts the shields to their normal "vanilla" behaviour.
        #     EFFECTIVE_TO_REGULAR_TYPES: Shields not defined will have 100% effectiveness to all regular types. Regular types are types that DDD doesn't treat differently (only two "non-regular" types exist, and they are built-in.
        #     ALLOW_BYPASS_DAMAGE_TYPE: Shields not defined will have 100% effectiveness to almost all types, except for one internal built-in type; the unknown type. This unknown type will bypass the shield entirely.
        # Valid values:
        # NO_EFFECTIVENESS
        # ALL_EFFECTIVENESS
        # EFFECTIVE_TO_REGULAR_TYPES
        # ALLOW_BYPASS_DAMAGE_TYPE
        S:"Default Shield Distribution"=NO_EFFECTIVENESS

        # If enabled, DDD will use armor and armor distributions. If turned off, DDD will not alter armor values in damage calculations, allowing armor to behave as it would in vanilla. Armor Distributions won't even be assigned or detected if disabled.
        B:"Enable Armor Calculations"=true

        # If enabled, DDD will use shields and shield distributions. If turned off, DDD will let shields behave as they would in vanilla. DDD won't even assign or detect Shield Distributions if disabled.
        B:"Enable Shield Calculations"=true

        # The armor effectiveness that non-specified types get when using the IMPLIED armor parsing rule.
        # Min: 0.0
        # Max: 1.7976931348623157E308
        D:"Implied Armor Effectiveness"=1.0

        # Modify the base resistance/weakness of mobs.
        # Each entry is of the form id;[(t,a)];[immunities];adaptive;amount where:
        #    id is the namespaced id of the mob (e.g. minecraft:zombie)
        #    [(t,a)] is a list of comma separated tuples (t,a), of damage types this mob resists.
        #       t is the damage type this mob resists. Requires the 'ddd_' prefix. Can use s, p, b instead as shorthand for slashing, piercing, or bludgeoning.
        #       a is the base percent of resistance this mob has to that damage type.
        #    [immunities] is a comma separated list of damage types that this mob is immune to. Requires the 'ddd_' prefix for each damage type.
        #    adaptive is a decimal in the range [0,1] indicating the percent chance that this mob has adaptive immunity, with 0 being never, and 1 being always.
        #    amount is the amount resistances change for this mob when adaptability triggers
        # Mobs that aren't listed here will have no resistances. Positive values indicate a resistance, negative values indicate a weakness.
        # Resistances and weaknesses are percentage based. That is, an value of 0.5 means that mob takes 50% less damage from that type, and a value of -0.5 means that mob takes 50% more damage from that type
        # Malformed entries in this list will be ignored.
        S:"Mob Base Resistance/Weakness" <
            minecraft:bat;[(b, -0.5), (ddd_poison, 0.2)];[];0;0
            minecraft:blaze;[(s, 0.2), (p, 0.2), (b, 0.2), (ddd_fire, 1), (ddd_poison, 0.5), (ddd_cold, -1)];[ddd_fire];0;0
            minecraft:cave_spider;[(p, 0.25), (b, -0.25)];[ddd_poison];0.3;0.25
            minecraft:chicken;[(b, -0.25)];[];0;0
            minecraft:cow;[];[];0;0
            minecraft:creeper;[(ddd_lightning, 0.3)];[ddd_thunder];0;0
            minecraft:donkey;[];[];0;0
            minecraft:elder_guardian;[(s, 0.25), (p, 0.25), (b, 0.25), (ddd_lightning, -0.15)];[];1.0;0.75
            minecraft:ender_dragon;[];[ddd_psychic];0;0
            minecraft:enderman;[(ddd_psychic, 0.5)];[];0.7;0.5
            minecraft:endermite;[(ddd_psychic, 0.7)];[];0.9;0.75
            minecraft:evocation_illager;[(ddd_psychic, 0.3), (ddd_force, 0.4)];[];0;0
            minecraft:ghast;[(b, 0.5)];[ddd_psychic];0;0
            minecraft:guardian;[(ddd_lightning, -0.2)];[];0.25;0.25
            minecraft:horse;[];[];0;0
            minecraft:husk;[(b, 0.25), (ddd_necrotic, 0.75), (ddd_poison, 0.5), (ddd_radiant, -0.25)];[];0;0
            minecraft:llama;[];[];0;0
            minecraft:magma_cube;[(s, 0.25), (p, 0.25), (b, 0.25), (ddd_fire, 1), (ddd_cold, -0.5), (ddd_poison, 0.2)];[b, ddd_acid, ddd_psychic, ddd_thunder, ddd_fire];0;0
            minecraft:mooshroom;[];[];0;0
            minecraft:mule;[];[];0;0
            minecraft:ocelot;[];[];0;0
            minecraft:parrot;[(b, -0.5)];[];0;0
            minecraft:pig;[];[];0;0
            minecraft:polar_bear;[(b, 0.25)];[ddd_cold];0;0
            minecraft:rabbit;[];[];0;0
            minecraft:sheep;[];[];0;0
            minecraft:shulker;[(s, 0.5), (p, -0.5), (b, 0.75), (ddd_psychic, 0.6), (ddd_thunder, 0.8)];[ddd_force];0.25;0.5
            minecraft:silverfish;[(b, -0.25), (p, 0.25), (ddd_fire, -0.1), (ddd_poison, 0.5)];[];0.95;1.0
            minecraft:skeleton;[(s, 0.25), (ddd_necrotic, 0.75), (ddd_radiant, -1)];[ddd_poison];0;0
            minecraft:skeleton_horse;[(s, 0.25), (ddd_necrotic, 0.75), (ddd_radiant, -1)];[ddd_poison];0;0
            minecraft:slime;[(s, -0.25), (b, 0.25), (ddd_thunder, -0.5), (ddd_acid, 1)];[b, ddd_poison, ddd_psychic, ddd_thunder, ddd_acid];0;0
            minecraft:spider;[(p, 0.25), (b, -0.25)];[ddd_poison];0.3;0.25
            minecraft:squid;[];[];0;0
            minecraft:stray;[(s, 0.25), (ddd_necrotic, 0.75), (ddd_radiant, -0.5)];[ddd_poison, ddd_cold];0;0
            minecraft:vex;[];[ddd_psychic, ddd_force];0;0
            minecraft:villager;[];[];0;0
            minecraft:vindication_illager;[];[];0;0
            minecraft:witch;[(ddd_acid, 0.2), (ddd_poison, 0.3)];[];0.1;0.25
            minecraft:wither_skeleton;[(s, 0.25), (ddd_necrotic, 1), (ddd_radiant, -1)];[ddd_poison, ddd_fire, ddd_necrotic];0;0
            minecraft:wolf;[];[];0;0
            minecraft:zombie;[(b, 0.25), (ddd_necrotic, 0.75), (ddd_poison, 0.8), (ddd_radiant, -0.5)];[];0;0
            minecraft:zombie_horse;[(b, 0.25), (ddd_necrotic, 0.75), (ddd_poison, 0.8), (ddd_radiant, -0.5)];[];0;0
            minecraft:zombie_pigman;[(b, 0.25), (ddd_necrotic, 0.75), (ddd_poison, 0.8), (ddd_radiant, -0.5)];[ddd_fire];0;0
            minecraft:zombie_villager;[(b, 0.25), (ddd_necrotic, 0.75), (ddd_poison, 0.8), (ddd_radiant, -0.5)];[];0;0
            minecraft:villager_golem;[(s, 0.5), (p, 0.75), (b, 1.0), (ddd_acid, -0.25), (ddd_force, 0.5), (ddd_thunder, 0.65), (ddd_fire, -0.25)];[ddd_poison, ddd_psychic, ddd_necrotic];0;0
            minecraft:snowman;[(b, 0.3), (ddd_force, 0.5), (ddd_thunder, 0.65), (ddd_fire, -0.5)];[ddd_cold, ddd_poison, ddd_psychic, ddd_necrotic];0;0
            minecraft:wither;[(s, 0.25), (ddd_necrotic, 1.25), (ddd_poison, 0.8), (ddd_radiant, -0.25)];[ddd_necrotic];0;0
            tconstruct:blueslime;[(s, -0.25), (b, 0.25), (ddd_thunder, -0.5), (ddd_acid, 1)];[b, ddd_poison, ddd_psychic, ddd_thunder, ddd_acid];0;0
            thermalfoundation:blizz;[(s, 0.2), (p, 0.2), (b, 0.2), (ddd_cold, 1), (ddd_poison, 0.5), (ddd_fire, -1)];[ddd_cold];0;0
            thermalfoundation:basalz;[(s, 0.2), (p, 0.2), (b, 0.2), (ddd_force, 1), (ddd_poison, 0.5), (ddd_thunder, -1)];[ddd_force];0;0
            thermalfoundation:blitz;[(s, 0.2), (p, 0.2), (b, 0.2), (ddd_thunder, 1), (ddd_poison, 0.5), (ddd_force, -1)];[ddd_thunder];0;0
            lycanitesmobs:wendigo;[(s, 0.15), (b, 0.15), (ddd_necrotic, 0.6), (ddd_radiant, -0.6)];[ddd_cold, ddd_poison];0;0
            lycanitesmobs:amalgalich;[(ddd_cold, 0.4), (ddd_lightning, 0.3), (ddd_radiant, -0.5)];[ddd_slashing, ddd_piercing, ddd_bludgeoning, ddd_poison, ddd_necrotic];0;0
            lycanitesmobs:geist;[(b, 0.3), (ddd_acid, 0.35), (ddd_fire, 0.45), (ddd_lightning, 0.4), (ddd_radiant, -0.7), (ddd_thunder, 0.9)];[ddd_necrotic, ddd_cold, ddd_poison];0.35;0.2
            lycanitesmobs:necrovore;[(ddd_radiant, -0.5)];[ddd_necrotic, ddd_poison];0;0
            lycanitesmobs:ghoul;[(b, 0.25), (ddd_necrotic, 0.75), (ddd_radiant, -0.5)];[ddd_poison];0;0
            lycanitesmobs:cryptkeeper;[(ddd_fire, 0.2), (ddd_necrotic, 0.6), (ddd_psychic, 0.1), (ddd_radiant, -0.5), (ddd_thunder, 0.15)];[ddd_poison];0;0
            lycanitesmobs:reaper;[(s, 0.4), (p, 0.4), (b, 0.2), (ddd_force, 1.0), (ddd_necrotic, 0.7), (ddd_radiant, -0.8), (ddd_thunder, 0.5)];[ddd_psychic, ddd_necrotic, ddd_poison, ddd_force];0;0
            lycanitesmobs:gnekk;[(b, 0.2), (ddd_acid, 0.3)];[ddd_poison];0;0
            lycanitesmobs:pixen;[];[ddd_psychic];0.4;0.4
            lycanitesmobs:clink;[(s, 0.3), (p, 0.1), (b, 0.5), (ddd_acid, -0.3), (ddd_fire, -0.2), (ddd_lightning, -0.15)];[];0;0
            lycanitesmobs:arix;[(s, 0.2), (p, 0.1), (b, 0.3), (ddd_cold, 1.0), (ddd_fire, -1.0)];[ddd_cold];0;0
            lycanitesmobs:afrit;[(s, 0.2), (p, 0.1), (b, 0.3), (ddd_cold, -1.0), (ddd_fire, 1.0)];[ddd_fire];0;0
            lycanitesmobs:jabberwock;[(s, -0.3), (p, -0.1), (b, 0.2), (ddd_cold, 0.1)];[];0;0
            lycanitesmobs:arisaur;[(s, 0.1), (b, 0.5), (ddd_acid, -0.3), (ddd_fire, -0.8), (ddd_necrotic, -0.8), (ddd_poison, -0.5)];[];0;0
            lycanitesmobs:wraamon;[(ddd_force, 0.6), (ddd_psychic, 0.4)];[];0.5;0.3
            lycanitesmobs:manticore;[(s, 0.4), (b, -0.25), (ddd_poison, 0.1)];[];0;0
            lycanitesmobs:barghest;[(b, 0.25)];[];0;0
            lycanitesmobs:conba;[(b, 0.1), (ddd_poison, 0.1)];[];0;0
            lycanitesmobs:warg;[(s, 0.2), (b, 0.25)];[];0;0
            lycanitesmobs:kobold;[(b, -0.2), (ddd_poison, 0.1)];[];0.8;0.3
            lycanitesmobs:makaalpha;[(p, 0.1), (b, 0.2), (ddd_cold, 0.1), (ddd_thunder, 0.2)];[];0;0
            lycanitesmobs:maka;[(p, 0.1), (b, 0.2), (ddd_cold, 0.1), (ddd_thunder, 0.2)];[];0;0
            lycanitesmobs:feradon;[(b, 0.2)];[];0;0
            lycanitesmobs:salamander;[(ddd_acid, 0.2), (ddd_cold, -0.8)];[ddd_fire];0;0
            lycanitesmobs:chupacabra;[(s, 0.15), (b, 0.2), (ddd_necrotic, 0.2), (ddd_poison, 0.2), (ddd_psychic, -0.25)];[];0;0
            lycanitesmobs:geken;[(s, 0.15), (b, 0.3), (ddd_necrotic, -0.2), (ddd_poison, 0.6)];[];0;0
            lycanitesmobs:maug;[(b, 0.2)];[ddd_cold];0;0
            lycanitesmobs:aspid;[(b, 0.2)];[ddd_poison];0;0
            lycanitesmobs:dawon;[(s, 0.3), (p, 0.2), (b, 0.2), (ddd_thunder, -0.25)];[];0;0
            lycanitesmobs:khalk;[(s, 0.8), (p, 0.8), (b, 0.8), (ddd_acid, 0.4), (ddd_cold, -0.8), (ddd_fire, 1.0), (ddd_thunder, -0.25)];[ddd_fire];0;0
            lycanitesmobs:quillbeast;[(b, 0.2)];[];0;0
            lycanitesmobs:yeti;[(b, 0.2), (ddd_fire, -0.8)];[ddd_cold];0;0
            lycanitesmobs:bobeko;[(b, 0.2), (ddd_fire, -0.8)];[ddd_cold];0;0
            lycanitesmobs:yale;[(s, 0.1), (b, 0.2), (ddd_cold, 0.5), (ddd_fire, 0.5), (ddd_lightning, 0.1)];[];0;0
            lycanitesmobs:epion;[(ddd_lightning, -0.25), (ddd_necrotic, 0.5), (ddd_psychic, 0.5), (ddd_radiant, -0.5)];[];0;0
            lycanitesmobs:balayang;[(ddd_lightning, -0.25), (ddd_poison, 0.25)];[];0;0
            lycanitesmobs:uvaraptor;[(b, -0.25), (ddd_lightning, -0.25)];[];0;0
            lycanitesmobs:roc;[(b, -0.25), (ddd_lightning, -0.25)];[];0;0
            lycanitesmobs:raiko;[(b, -0.25), (ddd_lightning, -0.25)];[];0;0
            lycanitesmobs:ventoraptor;[(b, -0.25), (ddd_lightning, -0.25)];[];0;0
            lycanitesmobs:lobber;[(s, 0.5), (b, 0.5), (ddd_cold, -0.5), (ddd_psychic, -0.25)];[ddd_fire];0;0
            lycanitesmobs:wildkin;[(s, 0.2), (b, 0.5), (ddd_cold, 0.25), (ddd_fire, 0.25), (ddd_lightning, 0.1), (ddd_psychic, -0.25)];[];0;0
            lycanitesmobs:troll;[(s, 0.5), (p, 0.5), (b, 0.5), (ddd_acid, 0.2), (ddd_cold, 0.2), (ddd_fire, 0.2), (ddd_psychic, -0.25), (ddd_thunder, -0.2)];[];1;0.25
            lycanitesmobs:ettin;[(s, 0.15), (b, 0.3), (ddd_psychic, -0.25)];[];0;0
            lycanitesmobs:lacedon;[(ddd_lightning, -0.25)];[];0.5;0.5
            lycanitesmobs:roa;[(ddd_acid, -0.25), (ddd_lightning, -0.5)];[];0;0
            lycanitesmobs:silex;[(ddd_acid, -0.25), (ddd_lightning, -1.0)];[];0;0
            lycanitesmobs:abtu;[(ddd_acid, -0.25), (ddd_lightning, -0.75)];[];0;0
            lycanitesmobs:strider;[(b, 0.2), (ddd_lightning, -0.5)];[];0;0
            lycanitesmobs:skylus;[(s, 0.3), (p, -0.25), (b, 0.5), (ddd_acid, -0.15), (ddd_lightning, -0.5), (ddd_thunder, -0.2)];[];0;0
            lycanitesmobs:thresher;[(s, 0.2), (b, 0.2), (ddd_lightning, -1.0)];[];0;0
            lycanitesmobs:aglebemu;[(ddd_lightning, -0.5)];[];0.25;0.25
            lycanitesmobs:cephignis;[(ddd_cold, -0.5), (ddd_lightning, -0.5)];[ddd_fire];1;0.35
            lycanitesmobs:abaia;[(ddd_acid, -0.15), (ddd_lightning, 1.0), (ddd_thunder, 0.5)];[ddd_lightning];0;0
            lycanitesmobs:ika;[(s, 0.25), (p, -0.25), (b, 0.3), (ddd_acid, -0.15), (ddd_lightning, -0.8), (ddd_thunder, 0.5)];[];0;0
            lycanitesmobs:dweller;[(s, 0.2), (ddd_acid, -0.15), (ddd_cold, 0.1), (ddd_fire, 0.1), (ddd_lightning, -0.8), (ddd_poison, 0.5)];[];0;0
            lycanitesmobs:ioray;[(ddd_lightning, -1.0)];[];0;0
            lycanitesmobs:quetzodracl;[(ddd_acid, 0.2), (ddd_cold, 0.2), (ddd_fire, 0.2), (ddd_lightning, -0.2)];[];0;0
            lycanitesmobs:cockatrice;[(ddd_acid, 0.2), (ddd_cold, 0.2), (ddd_fire, 0.2), (ddd_lightning, -0.5)];[];0;0
            lycanitesmobs:morock;[(ddd_acid, 0.2), (ddd_cold, 0.2), (ddd_fire, 0.2)];[];0;0
            lycanitesmobs:ignibus;[(s, 0.2), (p, 0.2), (b, 0.2), (ddd_acid, 0.2), (ddd_cold, -0.3), (ddd_fire, 1.0), (ddd_necrotic, 0.2)];[ddd_fire];0;0
            lycanitesmobs:zoataur;[(s, 0.6), (p, 0.6), (b, 0.6), (ddd_acid, 0.2), (ddd_cold, 0.2), (ddd_fire, 0.2), (ddd_force, 0.3), (ddd_necrotic, 0.2), (ddd_thunder, 0.2)];[];0;0
            lycanitesmobs:remobra;[(ddd_acid, 0.5), (ddd_cold, 0.2), (ddd_fire, 0.2), (ddd_lightning, -0.25), (ddd_poison, 1.0)];[];0;0
            lycanitesmobs:spriggan;[(ddd_acid, -0.25), (ddd_fire, -0.75), (ddd_necrotic, -0.25), (ddd_poison, -0.5)];[];0;0
            lycanitesmobs:tremor;[(ddd_force, 1.0), (ddd_psychic, -0.25), (ddd_thunder, 1.0)];[ddd_thunder];0;0
            lycanitesmobs:vapula;[(s, 0.15), (p, 1.0), (b, 0.8), (ddd_acid, 0.2), (ddd_force, 0.25), (ddd_necrotic, 1.0), (ddd_poison, 1.0), (ddd_psychic, 0.5), (ddd_thunder, -1.0)];[ddd_necrotic, ddd_poison];0;0
            lycanitesmobs:geonach;[(s, 0.75), (p, -0.25), (b, 1.0), (ddd_acid, -0.25), (ddd_necrotic, 1.0), (ddd_poison, 1.0), (ddd_thunder, -1.0)];[ddd_bludgeoning, ddd_necrotic, ddd_poison];0;0
            lycanitesmobs:cinder;[(ddd_cold, -1.0), (ddd_fire, 1.0)];[ddd_fire];0;0
            lycanitesmobs:reiver;[(ddd_cold, 1.0), (ddd_fire, -1.0)];[ddd_cold];0;0
            lycanitesmobs:jengu;[(ddd_acid, -1.0), (ddd_cold, 0.25), (ddd_fire, 1.0), (ddd_lightning, -1.0), (ddd_poison, -0.5), (ddd_thunder, 0.25)];[ddd_fire];0;0
            lycanitesmobs:spectre;[(ddd_force, 1.0), (ddd_psychic, 1.0)];[ddd_psychic];0;0
            lycanitesmobs:banshee;[(ddd_force, 1.0), (ddd_necrotic, 0.5), (ddd_poison, 0.5), (ddd_psychic, 1.0), (ddd_thunder, 1.0)];[ddd_force, ddd_psychic];0;0
            lycanitesmobs:grue;[(ddd_force, 1.0), (ddd_necrotic, 0.5), (ddd_psychic, 0.25), (ddd_radiant, -1.0)];[ddd_force];0;0
            lycanitesmobs:aegis;[(s, 0.25), (b, 0.5), (ddd_force, -0.25), (ddd_necrotic, 0.25), (ddd_poison, 1.0), (ddd_psychic, 1.0), (ddd_thunder, 1.0)];[];0;0
            lycanitesmobs:zephyr;[(ddd_lightning, 1.0)];[ddd_lightning, ddd_thunder];0;0
            lycanitesmobs:djinn;[(ddd_cold, 0.25), (ddd_fire, 0.25), (ddd_lightning, -1.0), (ddd_thunder, 1.0)];[ddd_thunder];0;0
            lycanitesmobs:eechetik;[(ddd_acid, 0.25), (ddd_necrotic, 0.25), (ddd_poison, 1.0), (ddd_psychic, -1.0)];[ddd_poison];0;0
            lycanitesmobs:wraith;[(ddd_fire, 1.0), (ddd_force, 0.25), (ddd_necrotic, 1.0), (ddd_poison, 1.0), (ddd_radiant, -1.0), (ddd_thunder, 1.0)];[ddd_fire, ddd_necrotic, ddd_poison, ddd_thunder];0;0
            lycanitesmobs:sylph;[(ddd_necrotic, 0.25), (ddd_poison, -0.25), (ddd_psychic, 0.15), (ddd_radiant, 1.0)];[ddd_radiant];0;0
            lycanitesmobs:volcan;[(ddd_acid, 0.25), (ddd_cold, -0.5), (ddd_fire, 1.0)];[ddd_fire];0;0
            lycanitesmobs:wisp;[(ddd_fire, 0.25), (ddd_lightning, 0.25), (ddd_radiant, 0.75), (ddd_thunder, -0.25)];[];0;0
            lycanitesmobs:argus;[(ddd_force, -0.5), (ddd_psychic, 1.0)];[];0;0
            lycanitesmobs:nymph;[(ddd_necrotic, 1.0), (ddd_poison, -1.0), (ddd_psychic, 0.5), (ddd_radiant, 1.0)];[ddd_radiant, ddd_necrotic];0;0
            lycanitesmobs:xaphan;[(ddd_acid, 1.0), (ddd_poison, 0.5), (ddd_psychic, -0.5)];[ddd_acid];0;0
            lycanitesmobs:herma;[(s, 0.5), (p, 0.5), (b, 0.3), (ddd_acid, 0.2), (ddd_lightning, -0.5)];[];0;0
            lycanitesmobs:sutiramu;[(s, 0.2), (p, 0.2), (ddd_fire, -0.5), (ddd_poison, 1.0)];[ddd_poison];0;0
            lycanitesmobs:vespidqueen;[(p, 0.15), (b, -0.25), (ddd_acid, -0.25), (ddd_fire, -1.0), (ddd_force, 0.25), (ddd_lightning, -0.25), (ddd_necrotic, -0.25), (ddd_poison, 1.25), (ddd_psychic, 0.25), (ddd_thunder, 0.25)];[ddd_poison];1;0.5
            lycanitesmobs:vespid;[(p, 0.15), (b, -0.5), (ddd_acid, -0.5), (ddd_fire, -1.0), (ddd_lightning, -0.5), (ddd_necrotic, -0.25), (ddd_poison, 1.0)];[ddd_poison];0.3;0.25
            lycanitesmobs:joustalpha;[(p, 0.8), (b, 0.2), (ddd_acid, -0.25), (ddd_necrotic, -0.25), (ddd_poison, 0.5)];[];0.6;0.3
            lycanitesmobs:joust;[(p, 0.8), (b, 0.2), (ddd_acid, -0.25), (ddd_necrotic, -0.25), (ddd_poison, 0.5)];[];0.5;0.3
            lycanitesmobs:tarantula;[(p, 0.3), (b, -0.3), (ddd_fire, -0.5)];[ddd_poison];0.3;0.25
            lycanitesmobs:calpod;[(s, 0.15), (b, -0.25), (ddd_acid, -0.25), (ddd_fire, -1.0), (ddd_lightning, -0.25), (ddd_necrotic, -0.25), (ddd_poison, 0.5)];[];0.7;0.6
            lycanitesmobs:erepede;[(p, 0.5), (ddd_fire, -1.0), (ddd_poison, 0.3)];[];0;0
            lycanitesmobs:concapedesegment;[(b, -0.15), (ddd_fire, -1.0), (ddd_poison, 0.3)];[ddd_poison];0.5;0.5
            lycanitesmobs:concapede;[(b, -0.15), (ddd_fire, -1.0), (ddd_poison, 0.3)];[ddd_poison];0.5;0.5
            lycanitesmobs:frostweaver;[(p, 0.25), (b, -0.25), (ddd_cold, 1.0), (ddd_fire, -1.5)];[];0.3;0.25
            lycanitesmobs:eyewig;[(ddd_acid, 0.5), (ddd_poison, 0.5)];[];0.25;0.15
            lycanitesmobs:gorgomite;[(p, 0.2), (b, -0.25), (ddd_fire, -1.0), (ddd_poison, 0.25)];[];0.9;0.8
            lycanitesmobs:darkling;[(p, 0.2), (b, -0.25), (ddd_fire, -1.0), (ddd_necrotic, 0.8), (ddd_poison, 0.25), (ddd_psychic, -0.25), (ddd_radiant, -0.5)];[];0.25;0.25
            lycanitesmobs:lurker;[(p, 0.2), (b, -0.25), (ddd_fire, -1.0), (ddd_poison, 1.0)];[ddd_poison];0.25;0.25
            lycanitesmobs:triffid;[(ddd_acid, -1.0), (ddd_fire, -1.0), (ddd_lightning, -0.25), (ddd_necrotic, -1.0), (ddd_poison, 1.0), (ddd_psychic, 0.6), (ddd_thunder, 1.0)];[ddd_thunder, ddd_poison];0;0
            lycanitesmobs:treant;[(s, -0.15), (b, 1.0), (ddd_acid, -0.5), (ddd_fire, -1.0), (ddd_necrotic, -0.25), (ddd_poison, -0.25)];[];0;0
            lycanitesmobs:ent;[(s, -0.3), (b, 1.0), (ddd_acid, -1.0), (ddd_fire, -1.0), (ddd_poison, -0.25)];[];0;0
            lycanitesmobs:tpumpkyn;[(s, -0.3), (b, 0.5), (ddd_acid, -0.5), (ddd_fire, -1.0), (ddd_poison, -0.25)];[];0;0
            lycanitesmobs:shambler;[(s, -0.25), (p, 1.0), (b, 0.5), (ddd_acid, -1.0), (ddd_fire, -1.0), (ddd_lightning, -0.25), (ddd_necrotic, -0.5), (ddd_poison, 1.0), (ddd_psychic, 0.25), (ddd_thunder, 0.25)];[ddd_piercing, ddd_poison];0;0
            lycanitesmobs:beholder;[];[];0.8;1
            lycanitesmobs:grell;[(ddd_necrotic, 0.3)];[ddd_acid, ddd_fire];0;0
            lycanitesmobs:grigori;[(ddd_necrotic, 0.3)];[ddd_fire];0;0
            lycanitesmobs:vorach;[(ddd_necrotic, 0.75)];[ddd_fire];0;0
            lycanitesmobs:trite;[(b, -0.25), (ddd_necrotic, 0.25), (ddd_poison, 0.25), (ddd_psychic, 0.25), (ddd_radiant, -0.5)];[];0.75;0.75
            lycanitesmobs:shade;[(s, 0.25), (p, 0.25), (b, 0.25), (ddd_psychic, 1.0), (ddd_radiant, 0.5)];[ddd_psychic];0;0
            lycanitesmobs:asmodeus;[(s, 0.25), (p, 0.25), (b, 0.25), (ddd_acid, -0.25), (ddd_force, 0.5), (ddd_lightning, -0.5), (ddd_necrotic, 1.0), (ddd_poison, 1.0), (ddd_psychic, 1.0), (ddd_radiant, -0.5)];[ddd_necrotic, ddd_psychic];0;0
            lycanitesmobs:astaroth;[(s, 0.15), (p, 0.15), (b, 0.15), (ddd_acid, -0.5), (ddd_lightning, -0.5), (ddd_necrotic, 1.0), (ddd_poison, 0.75), (ddd_psychic, 0.75), (ddd_radiant, -0.75)];[ddd_necrotic];0;0
            lycanitesmobs:krake;[(s, 0.15), (ddd_fire, -0.5), (ddd_force, 0.5), (ddd_poison, -0.75)];[ddd_thunder];0.5;0.5
            lycanitesmobs:crusk;[(s, 0.15), (p, 0.15), (b, 0.15)];[];0;0
            lycanitesmobs:serpix;[(s, 0.15), (p, 0.15), (b, 0.15), (ddd_cold, 1.0), (ddd_fire, -1.0)];[ddd_cold];0;0
            lycanitesmobs:gorger;[(s, 0.15), (p, 0.15), (b, 0.15), (ddd_cold, -1.0), (ddd_fire, 1.0)];[ddd_fire];0;0
            lycanitesmobs:behemoth;[(ddd_fire, 0.9), (ddd_necrotic, 0.8), (ddd_psychic, 0.5), (ddd_radiant, -1.0)];[ddd_necrotic, ddd_fire];0;0
            lycanitesmobs:belph;[(ddd_fire, 0.5), (ddd_necrotic, 0.4), (ddd_psychic, 0.5), (ddd_radiant, -1.0)];[ddd_necrotic, ddd_fire];0.1;0.25
            lycanitesmobs:pinky;[(ddd_fire, 0.5), (ddd_necrotic, 0.5), (ddd_psychic, 0.5), (ddd_radiant, -0.8)];[ddd_necrotic, ddd_fire];0;0
            lycanitesmobs:archvile;[(ddd_fire, 1.0), (ddd_necrotic, 1.0), (ddd_psychic, 1.0), (ddd_radiant, -1.0)];[ddd_necrotic, ddd_fire];0;0
            lycanitesmobs:cacodemon;[(ddd_fire, 1.0), (ddd_force, 0.2), (ddd_lightning, 1.0), (ddd_necrotic, 1.0), (ddd_psychic, 0.6), (ddd_radiant, -1.0)];[ddd_necrotic, ddd_fire];0;0
            lycanitesmobs:rahovart;[(s, 0.1), (p, 0.1), (b, 0.1), (ddd_fire, 1.0), (ddd_force, 0.6), (ddd_necrotic, 1.0), (ddd_poison, 0.5), (ddd_psychic, 1.0), (ddd_radiant, -1.0)];[ddd_necrotic, ddd_fire];0;0
         >

        # Change how DDD handles negative armor and toughness.
        #     DEFAULT: DDD's default behaviour, which is to do nothing different. When DDD computes armor modifications, it computes it relative to the original negative armor/toughness value, which results in a positive armor modification value if the effectiveness is less than 100% and a negative armor modification value if the effectivenss if over 100%.
        #     ABS: DDD will convert negative armor/toughness to their absolute value when computing armor modifications relative to their original armor/toughness values. This results in larger negative armor/toughness values for armor with effectivness below 100%, and smaller negative armor/toughness values for armor with effectiveness above 100%.
        # Valid values:
        # DEFAULT
        # ABS
        S:"Negative Armor Handling"=DEFAULT

        # Set the base resistance values for the player
        # This is likely only applicable to new worlds! Old worlds may not reflect this change!
        # The format for this is the same as Mob Base Resistance/Weakness, minus the leading id part and adaptability chance. All properties are usuable (immunities, adaptability), except adaptability chance, which will be set to 1 if adaptability amount is set to a non zero value
        S:"Player Base Resistance"=[];[];0

        # Modify how shields block damage.
        # Each entry is of the form id;[(t,a)] where:
        #    id is the namespaced id of the item (e.g. minecraft:shield)
        #    [(t,a)] is a list of comma separated tuples of damage types this shield blocks.
        #       t is the type this shield blocks. Requires the 'ddd_' prefix. Can use s, p, b as shorthand for slashing, piercing and bludgeoning damage, respectively.
        #       a is the effectiveness the shield has against that damage type.
        # Shields not listed here will use the default shield distribution option.
        # Shield effectiveness determines how much damage a shield can block. A shield with 0.3 slashing effectiveness can only block 30% of incoming slashing damage. The remaining 70% goes through the shield and damages the player, following regular damage calculation.
        # Blocking damage will still knock the attacker back, but the knockback strength is a percentage of the original vanilla knockback; that percentage comes from the amount of damage actually reduced (a shield that only blocks 33% of the incoming damage will knock the attacker back by about 33% of the vanilla amount).
        # Malformed entries in this list will be ignored.
        S:"Shield Effectiveness" <
            minecraft:shield;[(s, 0.8), (p, 0.5), (b, 0.2)]
            thebetweeenlands:weedwood_shield;[(s, 0.7), (p, 0.5), (b, 0.4)]
            thebetweenlands:living_weedwood_shield;[(s, 1), (p, 1), (b, 0.4), (ddd_psychic, 0.4)]
            thebetweenlands:lurker_skin_shield;[(s, 0.4), (p, 0.4), (b, 0.9), (ddd_cold, 0.3)]
            thebetweenlands:dentrothyst_shield_green;[(s, 0.3), (p, 0.3), (b, 0.3), (ddd_force, 0.7), (ddd_necrotic, 0.7), (ddd_radiant, 0.7), (ddd_poison, 0.7)]
            thebetweenlands:dentrothyst_shield_green_polished;[(s, 0.3), (p, 0.3), (b, 0.3), (ddd_force, 0.7), (ddd_necrotic, 0.7), (ddd_radiant, 0.7), (ddd_poison, 0.7)]
            thebetweenlands:dentrothyst_shield_orange;[(s, 0.3), (p, 0.3), (b, 0.3), (ddd_force, 0.7), (ddd_necrotic, 0.7), (ddd_radiant, 0.7), (ddd_poison, 0.7)]
            thebetweenlands:dentrothyst_shield_orange_polished;[(s, 0.3), (p, 0.3), (b, 0.3), (ddd_force, 0.7), (ddd_necrotic, 0.7), (ddd_radiant, 0.7), (ddd_poison, 0.7)]
            thebetweenlands:bone_shield;[(s, 1), (p, 0.6), (b, 0.6)]
            thebetweenlands:syrmorite_shield;[(s, 0.5), (p, 0.5), (b, 0.5)]
            thebetweenlands:valonite_shield;[(s, 0.6), (p, 0.6), (b, 0.7)]
            thebetweenlands:octine_shield;[(s, 0.8), (p, 0.8), (b, 0.6), (ddd_fire, 0.8)]
         >

        # Change how DDD behaves when blocking an attack that would normally set the player on fire, such as a burning zombie hitting a player. Only works if shield calculations are enabled.
        #     ALWAYS: DDD does nothing. This means blocking an attack that would set the player on fire WILL set the player on fire, due to how DDD handles shields.
        #     VANILLA: DDD emulates vanilla behaviour. The player will not be set on fire when blocking a blockable attack that would set them on fire.
        #     BLOCKED_THRESHOLD: DDD will reduce the duration a player is set on fire by a blocked attack by the percentage of damage blocked by the shield.
        #     FIRE_THRESHOLD: DDD will reduce the duration a player is set on fire by a blocked attack by the fire effectiveness the shield has.
        # Valid values:
        # ALWAYS
        # VANILLA
        # BLOCKED_THRESHOLD
        # FIRE_THRESHOLD
        S:"Shield Fire Rule"=ALWAYS
    }

    ##########################################################################################################
    # enchantments
    #--------------------------------------------------------------------------------------------------------#
    # Configure enchantments
    ##########################################################################################################

    enchantments {
        # If false, the Brute Force enchantment won't be registered. Worlds that had this enchant enabled will have this enchant removed from all items if loaded with this option set to false.
        B:"Enable Brute Force"=true

        # If false, the Sly Strike enchantment won't be registered. Worlds that had this enchant enabled will have this enchant removed from all items if loaded with this option set to false.
        B:"Enable Sly Strike"=true
    }

    ##########################################################################################################
    # client
    #--------------------------------------------------------------------------------------------------------#
    # Alter client side settings
    ##########################################################################################################

    client {
        # Set the colour scheme for armor tooltips.
        #     RED_GREEN: Use red when the armor effectiveness is less than 100% and green otherwise.
        #     GRAYSCALE: Use dark gray when the armor effectiveness is less than 100% and white otherwise.
        #     WHITE: Always use white.
        # Valid values:
        # RED_GREEN
        # GRAYSCALE
        # WHITE
        # GRAY
        S:"Armor Tooltip Colour Scheme"=RED_GREEN

        # Set the format of tooltips for Armor Distributions.
        #     PLAIN: Formats the Armor Distribution as the approximate armor and toughness that the armor would provide per type. Using this option always uses gray colour for text (outside of the damage type). Types not listed in the tooltip have zero effectiveness.
        #     PERCENT: Formats the Armor Distribution as the percent of effectiveness it has. Types not listed on the tooltip have zero effectiveness.
        #     RELATIVE: Formats the Armor Distribution as its relative effectiveness to 100%. Types not listed on the tooltip have 100% effectiveness.
        # Valid values:
        # PLAIN
        # PERCENT
        # RELATIVE
        S:"Armor Tooltip Format"=PERCENT

        # Set the format of tooltips for item Damage Distributions.
        #     PLAIN: Formats the Damage Distribution as the approximate amount of damage that would be inflicted per type.
        #     PERCENT: Formats the Damage Distribution as the percent of damage that would be inflicted of that type.
        # Valid values:
        # PLAIN
        # PERCENT
        S:"Damage Distribution Format"=PERCENT

        # Enable/disable resistance/weakness/immunity particles.
        B:"Enable Particles"=true

        # Enable/disable DDD's sound effects for resistance/weakness/immunity.
        B:"Enable SFX"=true

        # Set the format of tooltips for mob Damage Distributions that appear on spawn eggs if showMobDamage is true.
        #     PLAIN: Formats the Damage Distribution as the approximate amount of damage that would be inflicted per type.
        #     PERCENT: Formats the Damage Distribution as the percent of damage that would be inflicted of that type.
        # Valid values:
        # PLAIN
        # PERCENT
        S:"Mob Damage Distribution Format"=PERCENT

        # Set the colour scheme for mob resistance tooltips.
        #     RED_GREEN: Use red when a mob's resistance is less than 0% and green otherwise.
        #     GRAYSCALE: Use dark gray when a mob's resistance is less than 0% and white otherwise.
        #     WHITE: Always use white.
        # Valid values:
        # RED_GREEN
        # GRAYSCALE
        # WHITE
        # GRAY
        S:"Mob Resistances Colour Scheme"=RED_GREEN

        # If true, All Distint Damage Descriptions related tooltip information will always be shown (Basically, SHIFT or CTRL never need to be held on tooltips).
        B:"Never Hide Info"=false

        # If true, the Damage Distribution tooltip appears for all items. If false, it only appears for items with a damage distribution manually set.
        B:"Show Damage Distribution Tooltip for all items"=true

        # If true, Distinct Dasmage Descriptions will show mob damage in spawn egg tooltips when holding <SHIFT>.
        # Regular item damage distribution information will not be shown so long as the spawn eggs are not configured to have a particular distribution.
        # It is recommended to not set a distribution for spawn eggs if this is set to true, as this will make the tooltip cleaner.
        B:"Show Mob Damage On Spawn Items"=false

        # If true, Distinct Damage Descriptions will use icons for built in damage types (slashing, piercing, bludgeoning).
        # These icons will appear in place of those names everwhere except under the "Starting Immunities" in spawn egg tooltips.
        B:"Use Damage Type Icons"=false
    }

    ##########################################################################################################
    # compatibility/integration
    #--------------------------------------------------------------------------------------------------------#
    # Tweak DDD's behaviour with other mods
    ##########################################################################################################

    "compatibility/integration" {
        # With this enabled, DDD will not assign distributions/resistances to entities not given an explicit distribution/resistances in the config or through mod integration.
        # These entities will use a default damage distribution (defined in the damage category) and a default set of mob resistances (no resistances, no adaptability, no immunities), which can not be altered during gameplay.
        # This has the advantage to not saving any NBT data to these entities, which may theoretically cause problems with some mod behaviour, though extremely unlikely.
        B:"Only Use Defined Entity Distributions"=true

        # With this enabled, DDD will not assign distributions to items not given an explicit distribution in the config or through mod integration. It is recommended to leave this option untouched if you don't know what this does!
        # These items will use a default damage distribution (defined in the damage category) if one isn't defined, a default armor distribution if applicable (defined in the resistance category) if one isn't defined and a default shield distribution if applicable (defined in the resistance category) if one isn't defined, which can not be altered during gameplay.
        # This has the advantage of not saving any NBT data to these items, which may cause problems with some mod specific recipes, such as Mekanism.
        # Note this has no effect on items with distributions set in the config or items already created. Those will still have NBT data saved to them. This is just for everything else.
        B:"Only Use Defined Item Distributions"=true

        # A list of simple or fully qualified Java class names for items that should count as shields and receive shield distributions.
        # Just because a class name is here doesn't mean it can use shield distributions. It will get a shield distribution, but that shield distribution will only matter if that item can block when used.
        # Minecraft's shield class ItemShield need not be included here. This is only for items that work as shields but don't extend ItemShield.
        # If none of this made any sense, you probably don't need to touch this.
        S:"Shield Classes" <
            ItemShieldCore
         >

        ##########################################################################################################
        # construct's armory integration
        #--------------------------------------------------------------------------------------------------------#
        # Configure integration with Construct's Armory
        ##########################################################################################################

        "construct's armory integration" {
            # This dictates where DDD puts armor immunity traits, on the platers or on the core.
            # Only applies to new pieces made. Will not overwrite or change existing armor pieces.
            # No Trim option, as that's a little OP.
            # Valid values:
            # CORE
            # PLATES
            S:"Armor Immunity Trait Location"=PLATES

            # A list of entries of the form material;types that grant immunity traits to armor pieces. Only works for built in types.
            # material is the registration name of the Tinker's material. Pretty much always lowercase.
            # types is a comma separated list of DDD types, with the 'ddd_' prefix.
            S:"Armor Immunity Traits" <
                endstone;ddd_psychic
                netherrack;ddd_necrotic
                slime;ddd_acid
                blueslime;ddd_acid
                knightslime;ddd_piercing
                sponge;ddd_bludgeoning, ddd_thunder
                manyullyn;ddd_force
                obsidian;ddd_slashing
                electrum;ddd_lightning
             >

            # Determine the armor distribution for materials' plates pieces. Note this is affected by the armor parsing rule defined in the resists category.
            # Each entry is the same as a regular armor distribution entry, that is, of the form material;[(t,a)] where:
            #    material is the registration name of the Tinker's material. Pretty much always lowercase
            #    [(t,a}] is a comma sepatated list of tuples, (t,a), where:
            #       t is the type. requires the 'ddd_' prefix, but can use s, p, b as shorthand for slashing, piercing and bludgeoning
            #       a is the effectiveness this material has against that damage type.
            S:"Armor Material Distribution" <
                wood;[(s, 0.5), (p, 0.3), (b, 1)]
                stone;[(s, 1), (p, 1), (b, 1), (ddd_thunder, 0.5)]
                flint;[(s, 0.7), (p, 0.4), (b, 1), (ddd_thunder, 0.3)]
                cactus;[(s, 0.5), (p, 0.4), (b, 1)]
                bone;[(s, 1), (p, 0.5), (b, 0.6), (ddd_poison, 0.8)]
                obsidian;[(s, 0.6), (ddd_force, 0.8), (ddd_fire, 1), (ddd_acid, 0.4)]
                prismarine;[(s, 1), (p, 0.7), (b, 1), (ddd_cold, 0.5)]
                endstone;[(s, 1), (p, 1), (b, 1), (ddd_psychic, 0.7), (ddd_force, 0.3)]
                paper;[(b, 0.5)]
                sponge;[(s, 0.6), (b, 1), (ddd_lightning, 1)]
                firewood;[(s, 0.5), (p, 0.3), (b, 1), (ddd_cold, 1)]
                iron;[(s, 1), (p, 0.7), (b, 0.3)]
                pigiron;[(s, 1), (p, 0.7), (b, 0.3)]
                knightslime;[(s, 0.7), (p, 0.7), (b, 1), (ddd_acid, 1), (ddd_poison, 1), (ddd_psychic, 0.6)]
                slime;[(b, 1), (ddd_acid, 1), (ddd_poison, 1), (ddd_force, 0.5)]
                blueslime;[(b, 1), (ddd_acid, 1), (ddd_poison, 1), (ddd_force, 0.5)]
                magmaslime;[(b, 1), (ddd_fire, 1), (ddd_acid, 1), (ddd_poison, 1), (ddd_cold, 0.4)]
                netherrack;[(s, 0.25), (p, 0.25), (b, 1), (ddd_necrotic, 1)]
                cobalt;[(s, 0.1), (p, 1), (b, 0.7)]
                ardite;[(s, 0.6), (p, 0.6), (b, 0.6), (ddd_necrotic, 1), (ddd_psychic, 1)]
                manyullyn;[(s, 0.7), (p, 1), (b, 0.6), (ddd_force, 1), (ddd_thunder, 1)]
                copper;[(s, 1), (p, 0.7), (b, 0.3)]
                bronze;[(s, 1), (p, 0.7), (b, 0.3)]
                lead;[(s, 1), (p, 0.7), (b, 0.3), (ddd_acid, 0.3), (ddd_poison, 0.5), (ddd_necrotic, 0.4)]
                silver;[(s, 1), (p, 0.7), (b, 0.3), (ddd_radiant, 1), (ddd_necrotic, 0.3)]
                electrum;[(s, 1), (p, 0.7), (b, 0.3), (ddd_lightning, 1), (ddd_thunder, 1)]
                steel;[(s, 1), (p, 0.7), (b, 0.5), (ddd_thunder, 0.7)]
             >
        }

        ##########################################################################################################
        # tinker's construct integration
        #--------------------------------------------------------------------------------------------------------#
        # Configure integration with Tinker's Construct
        ##########################################################################################################

        "tinker's construct integration" {
            # Control's a material's influence. A material has two parts to its influence: and actual influence rating and a distribution.
            # A material's distribution is its preferred distribution it tries to lean the tool towards.
            # A material's influence rating is a measure of how good that material is at influencing head pieces.
            S:"Material Influence" <
                wood;[(b, 1)];0.6
                stone;[(b, 1)];1
                flint;[(b, 1)];0.3
                cactus;[(p, 1)];0.7
                bone;[(b, 1)];0.3
                obsidian;[(s, 0.8), (b, 0.2)];0.6
                prismarine;[(s, 0.6), (p, 0.4)];0.8
                endstone;[(b, 0.85), (ddd_psychic, 0.15)];0.9
                paper;[(s, 1)];0
                sponge;[(b, 1)];2
                firewood;[(ddd_fire, 1)];1.8
                iron;[(p, 1)];0.1
                pigiron;[(s, 1)];0.1
                knightslime;[(s, 0.5), (b, 0.5)];0.3
                slime;[(ddd_acid, 1)];1
                blueslime;[(ddd_acid, 1)];1
                magmaslime;[(ddd_fire, 0.5), (ddd_acid, 0.5)];1
                netherrack;[(ddd_necrotic, 0.7), (b, 0.3)];0.7
                cobalt;[(s, 1)];0.2
                ardite;[(ddd_necrotic, 0.3), (s, 0.7)];0.6
                manyullyn;[(ddd_force, 0.7), (s, 0.3)];0.7
                copper;[(p, 0.9), (b, 0.1)];0.1
                bronze;[(p, 0.5), (s, 0.5)];0.1
                lead;[(s, 0.8), (ddd_poison, 0.2)];0.6
                silver;[(p, 0.8), (ddd_radiant, 0.2)];0.6
                electrum;[(s, 0.6), (ddd_lightning, 0.4)];0.6
                steel;[(s, 1)];0.1
             >

            # Control a tool's bias. Tool bias is a tinker's tool's ability to stick to its base distribution.
            # Base distributions are defined in items.
            # Entries are of the form id;bias
            #    id is the namespaced id of the item (e.g. tconstruct:rapier). The mod name can be excluded ONLY if it's from tconstruct. Tinker tools added from other mods need the full namepaced id.
            #    bias is the tool's bias. A non negative decimal value. Negatives will be treated as 0. This value represents a percentage, so values under 1 are recommended, but you can use values over 1 for tool's whose distributions will never ever change.
            S:"Tool Bias" <
                pickaxe;0.5
                shovel;0.75
                hatchet;0.35
                mattock;0.6
                kama;0.5
                scythe;0.3
                hammer;0.9
                excavator;0.8
                lumberaxe;0.45
                broadsword;0.2
                longsword;0.25
                rapier;0.5
                battlesign;0.6
                frypan;1
                cleaver;0
                arrow;0.8
                shortbow;2
                longbow;2
                bolt;0.8
                crossbow;2
                shuriken;0
             >
        }

        ##########################################################################################################
        # lycanite's mobs integration
        #--------------------------------------------------------------------------------------------------------#
        # Configure integration with Lycanite's Mobs
        ##########################################################################################################

        "lycanite's mobs integration" {
            # The distribution that Acid and Sharacid use if enabled; a list of comma separated tuples [(t, a)] with the same rules as mob or weapon damage
            S:"Acid Distribution"=[(ddd_acid, 1)]

            # The distribution that Doomfire uses if enabled; a list of comma separated tuples [(t, a)] with the same rules as mob or weapon damage
            S:"Doomfire Distribution"=[(ddd_fire, 0.5), (ddd_necrotic, 0.5)]

            # Enable/disable the Acid Distribution. Acid and Sharacid will inflict acid damage.
            B:"Enable Acid Distribution"=true

            # Enable/disable the Doomfire Distribution. Burning in Doomfire will use the Doomfire distribution. Otherwise, will deal fire damage if the fire distribution is enabled.
            B:"Enable Doomfire Distribution"=true

            # Enable/disable the Frostfire Distribution. Burning in Frostfire will use the Frostfire distribution.
            B:"Enable Frostfire Distribution"=true

            # Enable/disable the Hellfire Distribution. Burning in Hellfire will use the Hellfire distribution. Otherwise, will deal fire damage if the fire distribution is enabled.
            B:"Enable Hellfire Distribution"=true

            # Enable/disable the Icefire Distribution. Burning in Icefire will use the Icefire distribution.
            B:"Enable Icefire Distribution"=true

            # Enable/disable the Ooze Distribution. Ooze and Rabbitooze will inflict cold damage.
            B:"Enable Ooze Distribution"=true

            # Enable/disable the Primefire Distribution. Burning in Primefire will use the Primefire distribution. Otherwise, will inflict fire damage if the fire distribution is enabled.
            B:"Enable Primefire Distribution"=true

            # Enable/disable the Scorchfire Distribution. Burning in Scorchfire will use the Scorchfire distribution. Otherwise, will deal fire damage if the fire distribution is enabled.
            B:"Enable Scorchfire Distribution"=true

            # Enable/disable the Shadowfire Distribution. Burning in Shadowfire will use the Shadowfire distribution. Otherwise, will inflict necrotic damage if the wither distribution is enabled.
            B:"Enable Shadowfire Distribution"=true

            # Enable/disable the smited distribution. Burning entities will take radiant damage while Smited
            B:"Enable Smited Distribution"=true

            # Enable/disable the Smitefire Distribution. Burning in Smitefire will use the Smitefire distribution. Otherwise, will inflict fire damage if the fire distribution is enabled.
            B:"Enable Smitefire Distribution"=true

            # The distribution that Frostfire uses if enabled; a list of comma separated tuples [(t, a)] with the same rules as mob or weapon damage
            S:"Frostfire Distribution"=[(ddd_fire, 0.3), (ddd_cold, 0.7)]

            # The distirbution that Hellfire uses if enabled; a list of comma separated tuples [(t, a)] with the same rules as mob or weapon damage
            S:"Hellfire Distribution"=[(ddd_fire, 0.3), (ddd_necrotic, 0.7)]

            # The distribution that Icefire uses if enabled; a list of comma separated tuples [(t, a)] with the same rules as mob or weapon damage
            S:"Icefire Distribution"=[(ddd_fire, 0.5), (ddd_cold, 0.5)]

            # This is to give DDD a hint as to what creatures fire what types of projectiles.
            # DDD needs this hint as when mobs are summoned as minions from Lycanite's Mobs, they use a different damage source instead of their projectiles.
            # This list lets you set mobs' damage distribution to the projectile they fire when they are minions, instead of setting that mobs damage distribution to the same thing as the projectile manually.
            # You don't need to use this, you can just set the mob's damage distribution yourself, if you want. This is provided for convenience. You also only really need to include mobs that are able to be summoned, but the default includes most, if not all mobs
            # Format is <projectile name>;mobs
            #     <projectile name> is the name of the projectile used in the projectile distributions configuration, without the mod id.
            #     mobs is a comma separated list of mob ids (without their modid) that shoot that projectile.
            S:"Mob Projectiles" <
                acidsplash;xaphan
                aetherwave;slyph
                aquapulse;jengu
                arcanelaserstorm;beholder
                blizzard;serpix
                bloodleech;epion
                boulderblast;troll
                chaosorb;argus
                crystalshard;vapula
                demonicblast;cacodemon
                devilstar;astaroth
                doomfireball;archvile,belph
                ember;cinder
                faebolt;nymph
                frostweb;frostweaver
                frostbolt;reiver
                hellfireball;behemoth
                icefireball;arix
                lifedrain;spriggan
                lightball;wisp
                magma;lobber,gorger
                mudshot;erepede
                poisonray;eyewig
                poop;conba
                quill;quillbeast
                scorchfireball;afrit,ignibus
                spectralbolt;reaper
                throwingscythe;clink
                tricksterflare;pixen
                tundra;wendigo
                venomshot;remobra
                waterjet;ioray
                whirlwind;djinn
                acidglob;grell
             >

            # The distribution that Ooze and Rabbitooze use if enabled; a list of comma separated tuples [(t, a)] with the same rules as mob or weapon damage
            S:"Ooze Distribution"=[(ddd_cold, 1)]

            # The distribution that Primefire uses if enabled; a list of comma separated tuples [(t, a)] with the same rules as mob or weapon damage
            S:"Primefire Distribution"=[(ddd_fire, 1)]

            # The distribution that Scorchfire uses if enabled; a list of comma separated tuples [(t, a)] with the same rules as mob or weapon damage
            S:"Scorchfire Distribution"=[(ddd_fire, 0.5), (ddd_force, 0.5)]

            # The distribution that Shadowfire uses if enabled; a list of comma separated tuples [(t, a)] with the same rules as mob or weapon damage
            S:"Shadowfire Distribution"=[(ddd_fire, 0.2), (ddd_psychic, 0.4), (ddd_necrotic, 0.4)]

            # The distribution that Smitefire uses if enabled; a list of comma separated tuples [(t, a)] with the same rules as mob or weapon damage
            S:"Smitefire Distribution"=[(ddd_fire, 0.3), (ddd_radiant, 0.7)]
        }

        ##########################################################################################################
        # tetra integration
        #--------------------------------------------------------------------------------------------------------#
        # Configure Tetra integration
        ##########################################################################################################

        "tetra integration" {
            # Modify material distributions for Tetra tool parts.
            # This is how the base tool part distribution gets modified.
            # The format is <nbt_tag>;<distribution>;<bias> where:
            #    <nbt_tag> is the material name found in the item NBT. Only the material name is needed, the part type referenced in the tag should not be included here. (That is, you only need to specify a material once, not for each part it's usable in).
            #    <distribution> is the distribution the material has, as specified in item distributions
            #    <bias> is the measure of how well this material influences parts. The difference between this and the tool part bias is used to determine how much this matereial influences the part's distribution.
            # A tool like /ct nbt or an NBT editor is great for finding the material names. All the defaults are included here.
            S:"Tetra Material Distributions" <
                log;[(b, 1)];0.5
                acacia;[(b, 1)];0.5
                birch;[(b, 1)];0.5
                dark_oak;[(b, 1)];0.5
                jungle;[(b, 1)];0.5
                oak;[(b, 1)];0.5
                spruce;[(b, 1)];0.5
                stone;[(b, 1)];1
                cobblestone;[(b, 1)];1
                diorite;[(b, 1)];1
                granite;[(b, 1)];1
                andesite;[(b, 1)];1
                flint;[(b, 1)];0.3
                iron;[(s, 1)];0
                gold;[(b, 0.5), (p, 0.5)];0.4
                diamond;[(s, 1)];0.5
                obsidian;[(s, 0.8), (b, 0.2)];0.6
             >

            # Modify base distributions for Tetra tool parts.
            # This is the distribution that gets modified by the material used.
            # The format is <nbt_tag>;<distribution>;<bias> where:
            #    <nbt_tag> is the NBT tag for the part type. blade parts are prefixed with 'sword/' and duplex parts are prefixed with 'duplex/'. Duplex tools don't need to specify left or right heads; the same is used for both. Tool butts don't count towards Duplex tool distributions, so the entry 'duplex/butt...' can be omitted.
            #    <distribution> is a distribution list, as specified in item distributions.
            #    <bias> is the bias this part has towards its distribution The difference between this and the material bias is used to determine how much the material influences the distribution.
            # A tool like /ct nbt or an NBT editor can be used to find the NBT tag names. All the defaults are included here.
            S:"Tetra Tool Part Base Distributions" <
                sword/heavy_blade;[(s, 0.5), (b, 0.5)];0.5
                sword/machete;[(s, 1)];1
                sword/basic_blade;[(s, 1)];0
                sword/shortblade;[(s, 0.5), (p, 0.5)];0.25
                duplex/adze;[(p, 1)];1
                duplex/claw;[(s, 0.5), (p, 0.5)];0.5
                duplex/basic_axe;[(s, 0.6), (b, 0.4)];0.3
                duplex/basic_hammer;[(b, 1)];1
                duplex/basic_pickaxe;[(p, 1)];0.5
                duplex/hoe;[(p, 1)];0.3
                duplex/sickle;[(s, 1)];0.4
             >
        }

        ##########################################################################################################
        # hwyla integration
        #--------------------------------------------------------------------------------------------------------#
        # Configure HWYLA integration
        ##########################################################################################################

        "hwyla integration" {
            # Control the way DDD displays damage on HWYLA info
            #     PLAIN: Show the actual damage per type this mob inflicts.
            #     PERCENT: Show the percentage of total damage this mob inflicts of a particular type.
            # Valid values:
            # PLAIN
            # PERCENT
            S:"HWYLA Damage Format"=PERCENT

            # Shows how the mob's armor affects their resistances. Must have showMobReists set to true
            B:"Show Mob Armor"=true

            # Shows the mob's damage they inflict. Takes into account the weapon being held.
            B:"Show Mob Damage"=true

            # Shows mob resistances.
            B:"Show Mob Resists"=true
        }

        ##########################################################################################################
        # baubles integration
        #--------------------------------------------------------------------------------------------------------#
        # Configure Baubles integration
        ##########################################################################################################

        "baubles integration" {
            # Change DDD's Bauble modifiers.
            # Each entry is of the form id;op;[(t,a)] where:
            #    id is the namespaced id of the bauble item.
            #    op is the operation performed:
            #       0 - DAMAGE MOD: Boosts damage dealt of type t by a%. The value for a can be negative to reduce damage, though will not reduce it below 0.
            #       1 - RESISTANCE MOD: Adds a% resistance to type t when taking damage. The value for a can be negative to reduce resistance.
            #       2 - BRUTE FORCE: Bypasses up to a% of resistance to type t when attacking.
            #       3 - SLY STRIKE: Has an a% chance of bypassing immunity to type t when attacking.
            #       4 - IMMUNITY: Has an a% chance to grant immunity to type t when taking damage.
            #    [(t,a)] is a list of tuples (t,a), separated by commas, where:
            #       t is the type. Requires the 'ddd_' prefix. Can use s, p, b, instead for slashing, piercing or bludegeoning.
            #       a is a decimal form of a percentage (e.g. 0.2 = 20%). The effect this value has depends on the operation specified before. Unless specified, it must always be positive.
            # Baubles not listed here will have none of these effects.
            # Malformed entries in this list are ignored.
            S:"Bauble Modifiers" <
                baubles:ring;0;[(p,0.2),(ddd_force,0.1)]
                baubles:ring;1;[(ddd_necrotic,0.5)]
                baubles:ring;2;[(b,0.5)]
                baubles:ring;3;[(ddd_fire,0.5)]
                baubles:ring;4;[(ddd_poison,0.8)]
             >

            # Set the colour scheme for DDD Bauble modifiers in tooltips. Only applies to damage and resistance modifiers (ops 0 and 1)
            #     RED_GREEN: Use red when the modifier is less than 100% and green otherwise.
            #     GRAYSCALE: Use dark gray when the modifier is less than 100% and white otherwise.
            #     WHITE: Always use white.
            # Valid values:
            # RED_GREEN
            # GRAYSCALE
            # WHITE
            # GRAY
            S:"Bauble Tooltip Colour Scheme"=RED_GREEN
        }

        ##########################################################################################################
        # electroblob's wizardry integration
        #--------------------------------------------------------------------------------------------------------#
        # Configure Electroblob's Wizardry Integration
        ##########################################################################################################

        "electroblob's wizardry integration" {
            # Link throwables to their damage type.
            # What this does is give DDD a hint as to what damage type a throwable inflicts. Then, DDD will link a projectile distribution to the item, so it shows the damage distribution in the tooltip.
            # This can be done manually through the projectil distribution config, these is just to make it easier, as all you need here is the Wizardry damage type it deals, and not a full damage distribution.
            # If you specify a damage type that isn't defined in Spell Damage Type Distributions, the entry will be ignored.
            # Format is id;type where:
            #    id is the namespaced ITEM id of the throwable. The mod id can be excluded ONLY if the item is from ebwizardry. Items added by addon mods will need the full namespaced id.
            #    type is the Wizardry damage type. NOT the DDD damage type.
            # Malformed entries in this list will be ignored.
            S:"Linked Throwables" <
                firebomb;fire
                poison_bomb;poison
                spark_bomb;shock
                flamecatcher;magic
             >

            # Specify what capabilities minions mimic. Minions will basically copy the entire config entry for mob resistances (adaptability included) and damage distribution of the specified entity and use it as their own.
            # They will only copy resistances if and only if they don't have an entry in the mob resistances config already. Same applies to damage distirbution.
            # You technically don't need this, you can specify the mob resistances and damage distribution for each minion in the mob resistances and mob damage section, this is just to save some obvious copying,
            # such as how zombie minions are likely to be configured to use the same resistances and damage as regular zombies.
            # Format is minionid;mobid where:
            #    minionid is the namespaced id of the minion. The mod id can be excluded ONLY if the minion is from ebwizardry. Minions added by addons will need the full namespaced id.
            #    mobid is the id of the mob the minion resembles and will copy the capabilities of.
            # If mobid is not in the config, the minion will get the default resistances and damage copied instead.
            # Minions not listed here will check the regular mob resistances config for a config entry.
            # Malformed entries in this list will be ignored.
            S:"Minion Capabilities" <
                zombie_minion;minecraft:zombie
                silverfish_minion;minecraft:silverfish
                spider_minion;minecraft:cave_spider
                wither_skeleton_minion;minecraft:wither_skeleton
                skeleton_minion;minecraft:skeleton
                stray_minion;minecraft:stray
                husk_minon;minecraft:husk
                blaze_minion;minecraft:blaze
                vex_minon;minecraft:vex
                magic_slime;minecraft:slime
             >

            # If enabled, DDD will gather the information from a spell's damage to report what kind of damage type it inflicts when it deals damage to something. Used with showSpellNameInfo to configure spellDamageType.
            # You also need DDD's Developer Mode enabled as well; this functions as an EBWizardry specific Developer Mode toggle.
            # Setting this to ENABLED_AND_IN_CHAT will additionally send this information to the in game chat (i.e. to all players in game)
            # Valid values:
            # DISABLED
            # ENABLED
            # ENABLED_AND_IN_CHAT
            S:"Show Spell Damage Info"=DISABLED

            # If enabled, DDD will add distribution info to the currently selected spell in a wand or spell stored in a scroll or book if it is configured in spellDamageType. The distribution will be shown by holding CTRL.
            B:"Show Spell Distirbution Tooltips"=true

            # If enabled, DDD will show the registry name of the spell being cast. Used with showSpellDamageInfo to configure spellDamageType.
            # You also need DDD's Developer Mode enabled as well; this functions as an EBWizardry specific Developer Mode toggle.
            # Setting this to ENABLED_AND_IN_CHAT will additionally send this information to the in game chat (i.e. to all players in game)
            # Valid values:
            # DISABLED
            # ENABLED
            # ENABLED_AND_IN_CHAT
            S:"Show Spell Name Info"=DISABLED

            # This is to give DDD a hint as to what spells inflict what kind of damage from EBWizardry. Spells configured here will have special Spell Distribution tooltips show up when they are the selected spell on a wand or stored in a scroll or book.
            # Spells not configured here won't have that tooltip show up at all. Consider using showSpellNameInfo and showSpellDamageInfo if you are trying to configure this.
            # Format is id;type where:
            #    id is the namespaced id of the spell. The mod id can be excluded ONLY if the spell is from ebwizardry. Spells added by other addons will need the full namespaced id.
            #    type is the Wizardry damage type. NOT the DDD damage type.
            # Malformed entries in this list will be ignored.
            S:"Spell Damage Type" <
                arc;shock
                black_hole;magic
                blizzard;frost
                boulder;magic
                bubble;magic
                celestial_smite;radiant
                chain_lightning;shock
                charge;shock
                darkness_orb;wither
                dart;magic
                decay;wither
                detonate;blast
                disintegration;fire
                earthquake;blast
                entrapment;magic
                fire_breath;fire
                fire_sigil;fire
                fireball;fire
                firebolt;fire
                firebomb;fire
                firestorm;fire
                flame_ray;fire
                force_arrow;force
                force_orb;blast
                forest_of_thorns;magic
                forests_curse;poison
                frost_ray;frost
                frost_sigil;frost
                guardian_beam;magic
                hailstorm;frost
                homing_spark;shock
                ice_charge;frost
                ice_lance;frost
                ice_shard;frost
                ice_spikes;frost
                iceball;frost
                life_drain;magic
                lightning_arrow;shock
                lightning_bolt;shock
                lightning_hammer;shock
                lightning_pulse;shock
                lightning_ray;shock
                lightning_sigil;shock
                lightning_web;shock
                magic_missile;magic
                paralysis;shock
                plague_of_darkness;wither
                poison_bomb;poison
                radiant_totem;radiant
                ray_of_purification;radiant
                ring_of_fire;fire
                shockwave;blast
                snare;magic
                spark_bomb;shock
                stormcloud;shock
                thunderbolt;shock
                thunderstorm;shock
                tornado;magic
                wither;wither
                withering_totem;wither
             >

            # Set what damage spells do based off their damage type. The defaults include all the damage types based of their internal name.
            # format is type;[(t,a)] where:
            #    type is the Wizardry damage type.
            #    [(t,a)] is a comma separated list of tuples that create a valid damage distribution, as described in the damage category configs.
            # ALL weights must add up to 1.
            # Types not listed here, will do force damage.
            # Malformed entries in this list will be ignored.
            S:"Spell Damage Type Distributions" <
                magic;[(ddd_force, 1)]
                fire;[(ddd_fire, 1)]
                frost;[(ddd_cold, 1)]
                shock;[(ddd_lightning, 1)]
                wither;[(ddd_necrotic, 1)]
                poison;[(ddd_poison, 1)]
                force;[(ddd_force, 1)]
                blast;[(b, 0.5), (ddd_thunder, 0.5)]
                radiant;[(ddd_radiant, 1)]
             >
        }

        ##########################################################################################################
        # thaumcraft integration
        #--------------------------------------------------------------------------------------------------------#
        # Configure Thaumcraft Integration. Requires Fermium Booter.
        ##########################################################################################################

        "thaumcraft integration" {
            # Configure the damage distribution associated with each aspect.
            # This is used when casting a spell; DDD analyzes the different aspects in each component and averages out their damage distributions to create a final damage distribution.
            # Format is aspect;[(t,a)] where:
            #    aspect is the name of the aspect. All lowercase.
            #    [(t,a)] is a comma separated list that defines a damage distribution as described in the damage category configs.
            # ALL weights must add to 1.
            # Aspects not listed here will do force damage.
            # Malformed entries in this list will be ignored.
            S:"Aspect Distribution" <
                aer;[(b,1)]
                terra;[(b,1)]
                ignis;[(ddd_fire,1)]
                aqua;[(b,1)]
                ordo;[(ddd_psychic,0.5),(ddd_force,0.5)]
                perditio;[(ddd_force,1)]
                vacuos;[(ddd_force,0.5),(ddd_necrotic,0.5)]
                lux;[(ddd_psychic,0.5),(ddd_radiant,0.5)]
                motus;[(ddd_thunder,1)]
                gelum;[(ddd_cold,1)]
                vitreus;[(p,1)]
                metallum;[(s,1)]
                victus;[(ddd_radiant,1)]
                mortuus;[(ddd_necrotic,1)]
                potentia;[(ddd_lightning,1)]
                permutatio;[(ddd_lightning,0.5),(ddd_force,0.5)]
                praecantatio;[(ddd_force,1)]
                auram;[(ddd_force,1)]
                alkimia;[(ddd_acid,0.5),(ddd_fire,0.5)]
                vitium;[(ddd_force,0.4),(ddd_psychic,0.3),(ddd_necrotic,0.3)]
                tenebrae;[(ddd_psychic,0.5),(ddd_necrotic,0.5)]
                alienis;[(ddd_psychic,0.7),(ddd_necrotic,0.3)]
                volatus;[(b,1)]
                herba;[(p,0.5),(ddd_poison,0.5)]
                instrumentum;[(b,0.4),(s,0.3),(p,0.3)]
                fabrico;[(b,0.5),(p,0.5)]
                machina;[(s,0.3),(b,0.7)]
                vinculum;[(p,0.7),(s,0.3)]
                spiritus;[(ddd_psychic,0.7),(ddd_radiant,0.3)]
                cognitio;[(ddd_psychic,1)]
                sensus;[(ddd_psychic,1)]
                aversio;[(ddd_psychic,1)]
                praemunio;[(ddd_radiant,1)]
                desiderium;[(ddd_psychic,0.7),(ddd_necrotic,0.3)]
                exanimis;[(ddd_necrotic,1)]
                bestia;[(p,0.5),(s,0.5)]
                humanus;[(ddd_psychic,0.5),(b,0.5)]
             >

            # Toggle Thaumcraft integration on or off.
            # This is in case you have DDD and Thaumcraft installed but don't want to also install Fermium Booter.
            # This turns off the integration entirely. Even if enabled, the integration only loads if Thaumcraft is present.
            B:Enabled=true

            # Set the distribution caused by Liquid Death. The format is a comma separated list [(t,a)] to define a damage distribution the same way as described in the damage category configs.
            S:"Liquid Death Distribution"=[(ddd_necrotic,1)]

            # Set the distribution caused by the Taint potion effect. The format is a comma separated list [(t,a)] to define a damage distribution the same way as described in the damage category configs.
            S:"Taint Distribution"=[(ddd_force, 0.5),(ddd_psychic,0.5)]

            # If true, DDD will use the distribution listed under Liquid Death Distribution for damage caused by Liquid Death.
            B:"Use Liquid Death Distribution"=true

            # If true, DDD will use the distribution listed under Taint Distribution for damage caused by the Taint potion effect.
            B:"Use Taint Distribution"=true
        }

    }

    ##########################################################################################################
    # development tools
    #--------------------------------------------------------------------------------------------------------#
    # Potentially useful troubleshooting/debugging tools for those configuring the mod - especially for modpacks
    ##########################################################################################################

    "development tools" {
        # A blanket switch to turn off all features. If true, features will follow their original configured behaviour. A warning message is given to all players who join worlds while true.
        # This is to make sure pack makers are aware of when the development tools are on or not.
        # To minimize log spam (and to actually be useful), it is recommended to playtest in a very controlled environment (void superflat world) when this feature is on, so the console doesn't get flooded with messages.
        B:Enabled=false

        # If enabled, DDD will log information whenever it checks if it should update mob resistances from adaptability. If adaptability is going to take place (forced or naturally), DDD will show what types the mob will be adapting to.
        # Setting this to ENABED_AND_IN_CHAT will additionally send this information to the in game chat (i.e to all players in game)
        # Valid values:
        # DISABLED
        # ENABLED
        # ENABLED_AND_IN_CHAT
        S:"Show Adaptive Calculations"=DISABLED

        # If enabled, DDD will log information whenever a LivingAttackEvent is fired (when an entity is attacked, but before damage calculations begin). DDD will log the attacker name and id, defender name and id, original damage source, and damage amount
        # Useful if you need to know what damage source names are.
        # Setting this to ENABLED_AND_IN_CHAT will additionally send this information to the in game chat (i.e. to all players in game)
        # Valid values:
        # DISABLED
        # ENABLED
        # ENABLED_AND_IN_CHAT
        S:"Show Attack Info"=DISABLED

        # If enabled, DDD will display config errors for any multi-entry config option in the chat when a player joins the world.
        B:"Show Config Errors on Join"=false

        # If enabled, DDD will log information whenever it determines and classifies damage. DDD will display the different damage types inflicted, along with their damage amounts.
        # Setting this to ENABED_AND_IN_CHAT will additionally send this information to the in game chat (i.e to all players in game)
        # Valid values:
        # DISABLED
        # ENABLED
        # ENABLED_AND_IN_CHAT
        S:"Show Damage Classification"=DISABLED

        # If enabled, DDD will log information whenever a LivingDamageEvent is fired (when an entity is about to take damage, after vanilla armor and potion calculations, and when DDD applies mob resistances and immunities). DDD will log the final amount of damage being dealt to the entity after all DDD calculations.
        # Setting this to ENABED_AND_IN_CHAT will additionally send this information to the in game chat (i.e to all players in game)
        # Valid values:
        # DISABLED
        # ENABLED
        # ENABLED_AND_IN_CHAT
        S:"Show Damage Info"=DISABLED

        # If enabled, DDD will log information whenever it gather mob resistances and immunities. DDD will display the resistances and immunities it has found.
        # Setting this to ENABED_AND_IN_CHAT will additionally send this information to the in game chat (i.e to all players in game)
        # Valid values:
        # DISABLED
        # ENABLED
        # ENABLED_AND_IN_CHAT
        S:"Show Defense Classification"=DISABLED

        # If enabled, DDD will log information whenever a LivingAttackEvent is fired (when an entity is about to take damage, and when DDD reduces damage via shields and applies armor bonuses). DDD will log the armor bonuses that the entity gets for that attack (as a result of their armor distributions), along with the current damage.
        # Setting this to ENABED_AND_IN_CHAT will additionally send this information to the in game chat (i.e to all players in game)
        # Valid values:
        # DISABLED
        # ENABLED
        # ENABLED_AND_IN_CHAT
        S:"Show Hurt Info"=DISABLED

        # If enabled, DDD will log information whenever it does shield reductions. If the shield block gets canceled, that gets displayed instead. If not canceled, DDD will display the shield distribution it used for the calculation.
        # Setting this to ENABED_AND_IN_CHAT will additionally send this information to the in game chat (i.e to all players in game)
        # Valid values:
        # DISABLED
        # ENABLED
        # ENABLED_AND_IN_CHAT
        S:"Show Shield Calculations"=DISABLED
    }

}


